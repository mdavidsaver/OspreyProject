// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ingestion.proto

#include "ingestion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dp {
namespace service {
namespace ingestion {
PROTOBUF_CONSTEXPR RegisterProviderRequest::RegisterProviderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.providername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesttime_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterProviderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterProviderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterProviderRequestDefaultTypeInternal() {}
  union {
    RegisterProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterProviderRequestDefaultTypeInternal _RegisterProviderRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterProviderResponse_RegistrationResult::RegisterProviderResponse_RegistrationResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.providerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterProviderResponse_RegistrationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterProviderResponse_RegistrationResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterProviderResponse_RegistrationResultDefaultTypeInternal() {}
  union {
    RegisterProviderResponse_RegistrationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterProviderResponse_RegistrationResultDefaultTypeInternal _RegisterProviderResponse_RegistrationResult_default_instance_;
PROTOBUF_CONSTEXPR RegisterProviderResponse::RegisterProviderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responsetime_)*/nullptr
  , /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RegisterProviderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterProviderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterProviderResponseDefaultTypeInternal() {}
  union {
    RegisterProviderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterProviderResponseDefaultTypeInternal _RegisterProviderResponse_default_instance_;
PROTOBUF_CONSTEXPR IngestDataRequest_IngestionDataFrame::IngestDataRequest_IngestionDataFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datacolumns_)*/{}
  , /*decltype(_impl_.datatimestamps_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IngestDataRequest_IngestionDataFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngestDataRequest_IngestionDataFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngestDataRequest_IngestionDataFrameDefaultTypeInternal() {}
  union {
    IngestDataRequest_IngestionDataFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngestDataRequest_IngestionDataFrameDefaultTypeInternal _IngestDataRequest_IngestionDataFrame_default_instance_;
PROTOBUF_CONSTEXPR IngestDataRequest::IngestDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.clientrequestid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesttime_)*/nullptr
  , /*decltype(_impl_.eventmetadata_)*/nullptr
  , /*decltype(_impl_.ingestiondataframe_)*/nullptr
  , /*decltype(_impl_.providerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IngestDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngestDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngestDataRequestDefaultTypeInternal() {}
  union {
    IngestDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngestDataRequestDefaultTypeInternal _IngestDataRequest_default_instance_;
PROTOBUF_CONSTEXPR IngestDataResponse_AckResult::IngestDataResponse_AckResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.numrows_)*/0u
  , /*decltype(_impl_.numcolumns_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IngestDataResponse_AckResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngestDataResponse_AckResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngestDataResponse_AckResultDefaultTypeInternal() {}
  union {
    IngestDataResponse_AckResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngestDataResponse_AckResultDefaultTypeInternal _IngestDataResponse_AckResult_default_instance_;
PROTOBUF_CONSTEXPR IngestDataResponse::IngestDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientrequestid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.responsetime_)*/nullptr
  , /*decltype(_impl_.providerid_)*/0u
  , /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct IngestDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngestDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngestDataResponseDefaultTypeInternal() {}
  union {
    IngestDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngestDataResponseDefaultTypeInternal _IngestDataResponse_default_instance_;
}  // namespace ingestion
}  // namespace service
}  // namespace dp
static ::_pb::Metadata file_level_metadata_ingestion_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ingestion_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ingestion_2eproto = nullptr;

const uint32_t TableStruct_ingestion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderRequest, _impl_.providername_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderRequest, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderRequest, _impl_.requesttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderResponse_RegistrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderResponse_RegistrationResult, _impl_.providerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderResponse, _impl_.responsetime_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::RegisterProviderResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest_IngestionDataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest_IngestionDataFrame, _impl_.datatimestamps_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest_IngestionDataFrame, _impl_.datacolumns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest, _impl_.providerid_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest, _impl_.clientrequestid_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest, _impl_.requesttime_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest, _impl_.eventmetadata_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataRequest, _impl_.ingestiondataframe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse_AckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse_AckResult, _impl_.numrows_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse_AckResult, _impl_.numcolumns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse, _impl_.providerid_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse, _impl_.clientrequestid_),
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse, _impl_.responsetime_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dp::service::ingestion::IngestDataResponse, _impl_.result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dp::service::ingestion::RegisterProviderRequest)},
  { 9, -1, -1, sizeof(::dp::service::ingestion::RegisterProviderResponse_RegistrationResult)},
  { 16, -1, -1, sizeof(::dp::service::ingestion::RegisterProviderResponse)},
  { 26, -1, -1, sizeof(::dp::service::ingestion::IngestDataRequest_IngestionDataFrame)},
  { 34, -1, -1, sizeof(::dp::service::ingestion::IngestDataRequest)},
  { 46, -1, -1, sizeof(::dp::service::ingestion::IngestDataResponse_AckResult)},
  { 54, -1, -1, sizeof(::dp::service::ingestion::IngestDataResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dp::service::ingestion::_RegisterProviderRequest_default_instance_._instance,
  &::dp::service::ingestion::_RegisterProviderResponse_RegistrationResult_default_instance_._instance,
  &::dp::service::ingestion::_RegisterProviderResponse_default_instance_._instance,
  &::dp::service::ingestion::_IngestDataRequest_IngestionDataFrame_default_instance_._instance,
  &::dp::service::ingestion::_IngestDataRequest_default_instance_._instance,
  &::dp::service::ingestion::_IngestDataResponse_AckResult_default_instance_._instance,
  &::dp::service::ingestion::_IngestDataResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ingestion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ingestion.proto\022\024dp.service.ingestion\032"
  "\014common.proto\"p\n\027RegisterProviderRequest"
  "\022\024\n\014providerName\030\001 \001(\t\022\036\n\nattributes\030\002 \003"
  "(\0132\n.Attribute\022\037\n\013requestTime\030\003 \001(\0132\n.Ti"
  "mestamp\"\202\002\n\030RegisterProviderResponse\022 \n\014"
  "responseTime\030\001 \001(\0132\n.Timestamp\022/\n\021except"
  "ionalResult\030\n \001(\0132\022.ExceptionalResultH\000\022"
  "_\n\022registrationResult\030\013 \001(\0132A.dp.service"
  ".ingestion.RegisterProviderResponse.Regi"
  "strationResultH\000\032(\n\022RegistrationResult\022\022"
  "\n\nproviderId\030\001 \001(\rB\010\n\006result\"\341\002\n\021IngestD"
  "ataRequest\022\022\n\nproviderId\030\001 \001(\r\022\027\n\017client"
  "RequestId\030\002 \001(\t\022\037\n\013requestTime\030\003 \001(\0132\n.T"
  "imestamp\022\036\n\nattributes\030\004 \003(\0132\n.Attribute"
  "\022%\n\reventMetadata\030\005 \001(\0132\016.EventMetadata\022"
  "V\n\022ingestionDataFrame\030\006 \001(\0132:.dp.service"
  ".ingestion.IngestDataRequest.IngestionDa"
  "taFrame\032_\n\022IngestionDataFrame\022\'\n\016dataTim"
  "estamps\030\001 \001(\0132\017.DataTimestamps\022 \n\013dataCo"
  "lumns\030\002 \003(\0132\013.DataColumn\"\231\002\n\022IngestDataR"
  "esponse\022\022\n\nproviderId\030\001 \001(\r\022\027\n\017clientReq"
  "uestId\030\002 \001(\t\022 \n\014responseTime\030\003 \001(\0132\n.Tim"
  "estamp\022/\n\021exceptionalResult\030\n \001(\0132\022.Exce"
  "ptionalResultH\000\022G\n\tackResult\030\013 \001(\01322.dp."
  "service.ingestion.IngestDataResponse.Ack"
  "ResultH\000\0320\n\tAckResult\022\017\n\007numRows\030\001 \001(\r\022\022"
  "\n\nnumColumns\030\002 \001(\rB\010\n\006result2\323\002\n\022DpInges"
  "tionService\022q\n\020registerProvider\022-.dp.ser"
  "vice.ingestion.RegisterProviderRequest\032."
  ".dp.service.ingestion.RegisterProviderRe"
  "sponse\022_\n\ningestData\022\'.dp.service.ingest"
  "ion.IngestDataRequest\032(.dp.service.inges"
  "tion.IngestDataResponse\022i\n\020ingestDataStr"
  "eam\022\'.dp.service.ingestion.IngestDataReq"
  "uest\032(.dp.service.ingestion.IngestDataRe"
  "sponse(\0010\001B&\n\"com.ospreydcs.dp.grpc.v1.i"
  "ngestionP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ingestion_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_ingestion_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ingestion_2eproto = {
    false, false, 1458, descriptor_table_protodef_ingestion_2eproto,
    "ingestion.proto",
    &descriptor_table_ingestion_2eproto_once, descriptor_table_ingestion_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_ingestion_2eproto::offsets,
    file_level_metadata_ingestion_2eproto, file_level_enum_descriptors_ingestion_2eproto,
    file_level_service_descriptors_ingestion_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ingestion_2eproto_getter() {
  return &descriptor_table_ingestion_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ingestion_2eproto(&descriptor_table_ingestion_2eproto);
namespace dp {
namespace service {
namespace ingestion {

// ===================================================================

class RegisterProviderRequest::_Internal {
 public:
  static const ::Timestamp& requesttime(const RegisterProviderRequest* msg);
};

const ::Timestamp&
RegisterProviderRequest::_Internal::requesttime(const RegisterProviderRequest* msg) {
  return *msg->_impl_.requesttime_;
}
void RegisterProviderRequest::clear_attributes() {
  _impl_.attributes_.Clear();
}
void RegisterProviderRequest::clear_requesttime() {
  if (GetArenaForAllocation() == nullptr && _impl_.requesttime_ != nullptr) {
    delete _impl_.requesttime_;
  }
  _impl_.requesttime_ = nullptr;
}
RegisterProviderRequest::RegisterProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dp.service.ingestion.RegisterProviderRequest)
}
RegisterProviderRequest::RegisterProviderRequest(const RegisterProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterProviderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.providername_){}
    , decltype(_impl_.requesttime_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.providername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.providername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_providername().empty()) {
    _this->_impl_.providername_.Set(from._internal_providername(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_requesttime()) {
    _this->_impl_.requesttime_ = new ::Timestamp(*from._impl_.requesttime_);
  }
  // @@protoc_insertion_point(copy_constructor:dp.service.ingestion.RegisterProviderRequest)
}

inline void RegisterProviderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){arena}
    , decltype(_impl_.providername_){}
    , decltype(_impl_.requesttime_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.providername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.providername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterProviderRequest::~RegisterProviderRequest() {
  // @@protoc_insertion_point(destructor:dp.service.ingestion.RegisterProviderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.providername_.Destroy();
  if (this != internal_default_instance()) delete _impl_.requesttime_;
}

void RegisterProviderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dp.service.ingestion.RegisterProviderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.providername_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.requesttime_ != nullptr) {
    delete _impl_.requesttime_;
  }
  _impl_.requesttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterProviderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string providerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_providername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dp.service.ingestion.RegisterProviderRequest.providerName"));
        } else
          goto handle_unusual;
        continue;
      // repeated .Attribute attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Timestamp requestTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requesttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterProviderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dp.service.ingestion.RegisterProviderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string providerName = 1;
  if (!this->_internal_providername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_providername().data(), static_cast<int>(this->_internal_providername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dp.service.ingestion.RegisterProviderRequest.providerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_providername(), target);
  }

  // repeated .Attribute attributes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Timestamp requestTime = 3;
  if (this->_internal_has_requesttime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::requesttime(this),
        _Internal::requesttime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dp.service.ingestion.RegisterProviderRequest)
  return target;
}

size_t RegisterProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dp.service.ingestion.RegisterProviderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Attribute attributes = 2;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string providerName = 1;
  if (!this->_internal_providername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_providername());
  }

  // .Timestamp requestTime = 3;
  if (this->_internal_has_requesttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requesttime_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterProviderRequest::GetClassData() const { return &_class_data_; }


void RegisterProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterProviderRequest*>(&to_msg);
  auto& from = static_cast<const RegisterProviderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dp.service.ingestion.RegisterProviderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_providername().empty()) {
    _this->_internal_set_providername(from._internal_providername());
  }
  if (from._internal_has_requesttime()) {
    _this->_internal_mutable_requesttime()->::Timestamp::MergeFrom(
        from._internal_requesttime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterProviderRequest::CopyFrom(const RegisterProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dp.service.ingestion.RegisterProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterProviderRequest::IsInitialized() const {
  return true;
}

void RegisterProviderRequest::InternalSwap(RegisterProviderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.providername_, lhs_arena,
      &other->_impl_.providername_, rhs_arena
  );
  swap(_impl_.requesttime_, other->_impl_.requesttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterProviderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ingestion_2eproto_getter, &descriptor_table_ingestion_2eproto_once,
      file_level_metadata_ingestion_2eproto[0]);
}

// ===================================================================

class RegisterProviderResponse_RegistrationResult::_Internal {
 public:
};

RegisterProviderResponse_RegistrationResult::RegisterProviderResponse_RegistrationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
}
RegisterProviderResponse_RegistrationResult::RegisterProviderResponse_RegistrationResult(const RegisterProviderResponse_RegistrationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterProviderResponse_RegistrationResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.providerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.providerid_ = from._impl_.providerid_;
  // @@protoc_insertion_point(copy_constructor:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
}

inline void RegisterProviderResponse_RegistrationResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.providerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterProviderResponse_RegistrationResult::~RegisterProviderResponse_RegistrationResult() {
  // @@protoc_insertion_point(destructor:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterProviderResponse_RegistrationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterProviderResponse_RegistrationResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterProviderResponse_RegistrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.providerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterProviderResponse_RegistrationResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 providerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.providerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterProviderResponse_RegistrationResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 providerId = 1;
  if (this->_internal_providerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_providerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
  return target;
}

size_t RegisterProviderResponse_RegistrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 providerId = 1;
  if (this->_internal_providerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_providerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterProviderResponse_RegistrationResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterProviderResponse_RegistrationResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterProviderResponse_RegistrationResult::GetClassData() const { return &_class_data_; }


void RegisterProviderResponse_RegistrationResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterProviderResponse_RegistrationResult*>(&to_msg);
  auto& from = static_cast<const RegisterProviderResponse_RegistrationResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_providerid() != 0) {
    _this->_internal_set_providerid(from._internal_providerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterProviderResponse_RegistrationResult::CopyFrom(const RegisterProviderResponse_RegistrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dp.service.ingestion.RegisterProviderResponse.RegistrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterProviderResponse_RegistrationResult::IsInitialized() const {
  return true;
}

void RegisterProviderResponse_RegistrationResult::InternalSwap(RegisterProviderResponse_RegistrationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.providerid_, other->_impl_.providerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterProviderResponse_RegistrationResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ingestion_2eproto_getter, &descriptor_table_ingestion_2eproto_once,
      file_level_metadata_ingestion_2eproto[1]);
}

// ===================================================================

class RegisterProviderResponse::_Internal {
 public:
  static const ::Timestamp& responsetime(const RegisterProviderResponse* msg);
  static const ::ExceptionalResult& exceptionalresult(const RegisterProviderResponse* msg);
  static const ::dp::service::ingestion::RegisterProviderResponse_RegistrationResult& registrationresult(const RegisterProviderResponse* msg);
};

const ::Timestamp&
RegisterProviderResponse::_Internal::responsetime(const RegisterProviderResponse* msg) {
  return *msg->_impl_.responsetime_;
}
const ::ExceptionalResult&
RegisterProviderResponse::_Internal::exceptionalresult(const RegisterProviderResponse* msg) {
  return *msg->_impl_.result_.exceptionalresult_;
}
const ::dp::service::ingestion::RegisterProviderResponse_RegistrationResult&
RegisterProviderResponse::_Internal::registrationresult(const RegisterProviderResponse* msg) {
  return *msg->_impl_.result_.registrationresult_;
}
void RegisterProviderResponse::clear_responsetime() {
  if (GetArenaForAllocation() == nullptr && _impl_.responsetime_ != nullptr) {
    delete _impl_.responsetime_;
  }
  _impl_.responsetime_ = nullptr;
}
void RegisterProviderResponse::set_allocated_exceptionalresult(::ExceptionalResult* exceptionalresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (exceptionalresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exceptionalresult));
    if (message_arena != submessage_arena) {
      exceptionalresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exceptionalresult, submessage_arena);
    }
    set_has_exceptionalresult();
    _impl_.result_.exceptionalresult_ = exceptionalresult;
  }
  // @@protoc_insertion_point(field_set_allocated:dp.service.ingestion.RegisterProviderResponse.exceptionalResult)
}
void RegisterProviderResponse::clear_exceptionalresult() {
  if (_internal_has_exceptionalresult()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.exceptionalresult_;
    }
    clear_has_result();
  }
}
void RegisterProviderResponse::set_allocated_registrationresult(::dp::service::ingestion::RegisterProviderResponse_RegistrationResult* registrationresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (registrationresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(registrationresult);
    if (message_arena != submessage_arena) {
      registrationresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registrationresult, submessage_arena);
    }
    set_has_registrationresult();
    _impl_.result_.registrationresult_ = registrationresult;
  }
  // @@protoc_insertion_point(field_set_allocated:dp.service.ingestion.RegisterProviderResponse.registrationResult)
}
RegisterProviderResponse::RegisterProviderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dp.service.ingestion.RegisterProviderResponse)
}
RegisterProviderResponse::RegisterProviderResponse(const RegisterProviderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterProviderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetime_){nullptr}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responsetime()) {
    _this->_impl_.responsetime_ = new ::Timestamp(*from._impl_.responsetime_);
  }
  clear_has_result();
  switch (from.result_case()) {
    case kExceptionalResult: {
      _this->_internal_mutable_exceptionalresult()->::ExceptionalResult::MergeFrom(
          from._internal_exceptionalresult());
      break;
    }
    case kRegistrationResult: {
      _this->_internal_mutable_registrationresult()->::dp::service::ingestion::RegisterProviderResponse_RegistrationResult::MergeFrom(
          from._internal_registrationresult());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dp.service.ingestion.RegisterProviderResponse)
}

inline void RegisterProviderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetime_){nullptr}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_result();
}

RegisterProviderResponse::~RegisterProviderResponse() {
  // @@protoc_insertion_point(destructor:dp.service.ingestion.RegisterProviderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterProviderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.responsetime_;
  if (has_result()) {
    clear_result();
  }
}

void RegisterProviderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterProviderResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:dp.service.ingestion.RegisterProviderResponse)
  switch (result_case()) {
    case kExceptionalResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.exceptionalresult_;
      }
      break;
    }
    case kRegistrationResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.registrationresult_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}


void RegisterProviderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dp.service.ingestion.RegisterProviderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.responsetime_ != nullptr) {
    delete _impl_.responsetime_;
  }
  _impl_.responsetime_ = nullptr;
  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterProviderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Timestamp responseTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responsetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExceptionalResult exceptionalResult = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_exceptionalresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dp.service.ingestion.RegisterProviderResponse.RegistrationResult registrationResult = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_registrationresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterProviderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dp.service.ingestion.RegisterProviderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Timestamp responseTime = 1;
  if (this->_internal_has_responsetime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::responsetime(this),
        _Internal::responsetime(this).GetCachedSize(), target, stream);
  }

  // .ExceptionalResult exceptionalResult = 10;
  if (_internal_has_exceptionalresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::exceptionalresult(this),
        _Internal::exceptionalresult(this).GetCachedSize(), target, stream);
  }

  // .dp.service.ingestion.RegisterProviderResponse.RegistrationResult registrationResult = 11;
  if (_internal_has_registrationresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::registrationresult(this),
        _Internal::registrationresult(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dp.service.ingestion.RegisterProviderResponse)
  return target;
}

size_t RegisterProviderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dp.service.ingestion.RegisterProviderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Timestamp responseTime = 1;
  if (this->_internal_has_responsetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.responsetime_);
  }

  switch (result_case()) {
    // .ExceptionalResult exceptionalResult = 10;
    case kExceptionalResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.exceptionalresult_);
      break;
    }
    // .dp.service.ingestion.RegisterProviderResponse.RegistrationResult registrationResult = 11;
    case kRegistrationResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.registrationresult_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterProviderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterProviderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterProviderResponse::GetClassData() const { return &_class_data_; }


void RegisterProviderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterProviderResponse*>(&to_msg);
  auto& from = static_cast<const RegisterProviderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dp.service.ingestion.RegisterProviderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_responsetime()) {
    _this->_internal_mutable_responsetime()->::Timestamp::MergeFrom(
        from._internal_responsetime());
  }
  switch (from.result_case()) {
    case kExceptionalResult: {
      _this->_internal_mutable_exceptionalresult()->::ExceptionalResult::MergeFrom(
          from._internal_exceptionalresult());
      break;
    }
    case kRegistrationResult: {
      _this->_internal_mutable_registrationresult()->::dp::service::ingestion::RegisterProviderResponse_RegistrationResult::MergeFrom(
          from._internal_registrationresult());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterProviderResponse::CopyFrom(const RegisterProviderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dp.service.ingestion.RegisterProviderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterProviderResponse::IsInitialized() const {
  return true;
}

void RegisterProviderResponse::InternalSwap(RegisterProviderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.responsetime_, other->_impl_.responsetime_);
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterProviderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ingestion_2eproto_getter, &descriptor_table_ingestion_2eproto_once,
      file_level_metadata_ingestion_2eproto[2]);
}

// ===================================================================

class IngestDataRequest_IngestionDataFrame::_Internal {
 public:
  static const ::DataTimestamps& datatimestamps(const IngestDataRequest_IngestionDataFrame* msg);
};

const ::DataTimestamps&
IngestDataRequest_IngestionDataFrame::_Internal::datatimestamps(const IngestDataRequest_IngestionDataFrame* msg) {
  return *msg->_impl_.datatimestamps_;
}
void IngestDataRequest_IngestionDataFrame::clear_datatimestamps() {
  if (GetArenaForAllocation() == nullptr && _impl_.datatimestamps_ != nullptr) {
    delete _impl_.datatimestamps_;
  }
  _impl_.datatimestamps_ = nullptr;
}
void IngestDataRequest_IngestionDataFrame::clear_datacolumns() {
  _impl_.datacolumns_.Clear();
}
IngestDataRequest_IngestionDataFrame::IngestDataRequest_IngestionDataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
}
IngestDataRequest_IngestionDataFrame::IngestDataRequest_IngestionDataFrame(const IngestDataRequest_IngestionDataFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IngestDataRequest_IngestionDataFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datacolumns_){from._impl_.datacolumns_}
    , decltype(_impl_.datatimestamps_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_datatimestamps()) {
    _this->_impl_.datatimestamps_ = new ::DataTimestamps(*from._impl_.datatimestamps_);
  }
  // @@protoc_insertion_point(copy_constructor:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
}

inline void IngestDataRequest_IngestionDataFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datacolumns_){arena}
    , decltype(_impl_.datatimestamps_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IngestDataRequest_IngestionDataFrame::~IngestDataRequest_IngestionDataFrame() {
  // @@protoc_insertion_point(destructor:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IngestDataRequest_IngestionDataFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datacolumns_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.datatimestamps_;
}

void IngestDataRequest_IngestionDataFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IngestDataRequest_IngestionDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datacolumns_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.datatimestamps_ != nullptr) {
    delete _impl_.datatimestamps_;
  }
  _impl_.datatimestamps_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngestDataRequest_IngestionDataFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DataTimestamps dataTimestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_datatimestamps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DataColumn dataColumns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datacolumns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IngestDataRequest_IngestionDataFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DataTimestamps dataTimestamps = 1;
  if (this->_internal_has_datatimestamps()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::datatimestamps(this),
        _Internal::datatimestamps(this).GetCachedSize(), target, stream);
  }

  // repeated .DataColumn dataColumns = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datacolumns_size()); i < n; i++) {
    const auto& repfield = this->_internal_datacolumns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
  return target;
}

size_t IngestDataRequest_IngestionDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataColumn dataColumns = 2;
  total_size += 1UL * this->_internal_datacolumns_size();
  for (const auto& msg : this->_impl_.datacolumns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DataTimestamps dataTimestamps = 1;
  if (this->_internal_has_datatimestamps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.datatimestamps_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IngestDataRequest_IngestionDataFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IngestDataRequest_IngestionDataFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IngestDataRequest_IngestionDataFrame::GetClassData() const { return &_class_data_; }


void IngestDataRequest_IngestionDataFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IngestDataRequest_IngestionDataFrame*>(&to_msg);
  auto& from = static_cast<const IngestDataRequest_IngestionDataFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datacolumns_.MergeFrom(from._impl_.datacolumns_);
  if (from._internal_has_datatimestamps()) {
    _this->_internal_mutable_datatimestamps()->::DataTimestamps::MergeFrom(
        from._internal_datatimestamps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IngestDataRequest_IngestionDataFrame::CopyFrom(const IngestDataRequest_IngestionDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dp.service.ingestion.IngestDataRequest.IngestionDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestDataRequest_IngestionDataFrame::IsInitialized() const {
  return true;
}

void IngestDataRequest_IngestionDataFrame::InternalSwap(IngestDataRequest_IngestionDataFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datacolumns_.InternalSwap(&other->_impl_.datacolumns_);
  swap(_impl_.datatimestamps_, other->_impl_.datatimestamps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IngestDataRequest_IngestionDataFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ingestion_2eproto_getter, &descriptor_table_ingestion_2eproto_once,
      file_level_metadata_ingestion_2eproto[3]);
}

// ===================================================================

class IngestDataRequest::_Internal {
 public:
  static const ::Timestamp& requesttime(const IngestDataRequest* msg);
  static const ::EventMetadata& eventmetadata(const IngestDataRequest* msg);
  static const ::dp::service::ingestion::IngestDataRequest_IngestionDataFrame& ingestiondataframe(const IngestDataRequest* msg);
};

const ::Timestamp&
IngestDataRequest::_Internal::requesttime(const IngestDataRequest* msg) {
  return *msg->_impl_.requesttime_;
}
const ::EventMetadata&
IngestDataRequest::_Internal::eventmetadata(const IngestDataRequest* msg) {
  return *msg->_impl_.eventmetadata_;
}
const ::dp::service::ingestion::IngestDataRequest_IngestionDataFrame&
IngestDataRequest::_Internal::ingestiondataframe(const IngestDataRequest* msg) {
  return *msg->_impl_.ingestiondataframe_;
}
void IngestDataRequest::clear_requesttime() {
  if (GetArenaForAllocation() == nullptr && _impl_.requesttime_ != nullptr) {
    delete _impl_.requesttime_;
  }
  _impl_.requesttime_ = nullptr;
}
void IngestDataRequest::clear_attributes() {
  _impl_.attributes_.Clear();
}
void IngestDataRequest::clear_eventmetadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.eventmetadata_ != nullptr) {
    delete _impl_.eventmetadata_;
  }
  _impl_.eventmetadata_ = nullptr;
}
IngestDataRequest::IngestDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dp.service.ingestion.IngestDataRequest)
}
IngestDataRequest::IngestDataRequest(const IngestDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IngestDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.clientrequestid_){}
    , decltype(_impl_.requesttime_){nullptr}
    , decltype(_impl_.eventmetadata_){nullptr}
    , decltype(_impl_.ingestiondataframe_){nullptr}
    , decltype(_impl_.providerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientrequestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientrequestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientrequestid().empty()) {
    _this->_impl_.clientrequestid_.Set(from._internal_clientrequestid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_requesttime()) {
    _this->_impl_.requesttime_ = new ::Timestamp(*from._impl_.requesttime_);
  }
  if (from._internal_has_eventmetadata()) {
    _this->_impl_.eventmetadata_ = new ::EventMetadata(*from._impl_.eventmetadata_);
  }
  if (from._internal_has_ingestiondataframe()) {
    _this->_impl_.ingestiondataframe_ = new ::dp::service::ingestion::IngestDataRequest_IngestionDataFrame(*from._impl_.ingestiondataframe_);
  }
  _this->_impl_.providerid_ = from._impl_.providerid_;
  // @@protoc_insertion_point(copy_constructor:dp.service.ingestion.IngestDataRequest)
}

inline void IngestDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){arena}
    , decltype(_impl_.clientrequestid_){}
    , decltype(_impl_.requesttime_){nullptr}
    , decltype(_impl_.eventmetadata_){nullptr}
    , decltype(_impl_.ingestiondataframe_){nullptr}
    , decltype(_impl_.providerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientrequestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientrequestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IngestDataRequest::~IngestDataRequest() {
  // @@protoc_insertion_point(destructor:dp.service.ingestion.IngestDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IngestDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.clientrequestid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.requesttime_;
  if (this != internal_default_instance()) delete _impl_.eventmetadata_;
  if (this != internal_default_instance()) delete _impl_.ingestiondataframe_;
}

void IngestDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IngestDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dp.service.ingestion.IngestDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.clientrequestid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.requesttime_ != nullptr) {
    delete _impl_.requesttime_;
  }
  _impl_.requesttime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.eventmetadata_ != nullptr) {
    delete _impl_.eventmetadata_;
  }
  _impl_.eventmetadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ingestiondataframe_ != nullptr) {
    delete _impl_.ingestiondataframe_;
  }
  _impl_.ingestiondataframe_ = nullptr;
  _impl_.providerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngestDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 providerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.providerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientRequestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientrequestid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dp.service.ingestion.IngestDataRequest.clientRequestId"));
        } else
          goto handle_unusual;
        continue;
      // .Timestamp requestTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requesttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Attribute attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .EventMetadata eventMetadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventmetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dp.service.ingestion.IngestDataRequest.IngestionDataFrame ingestionDataFrame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ingestiondataframe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IngestDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dp.service.ingestion.IngestDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 providerId = 1;
  if (this->_internal_providerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_providerid(), target);
  }

  // string clientRequestId = 2;
  if (!this->_internal_clientrequestid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientrequestid().data(), static_cast<int>(this->_internal_clientrequestid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dp.service.ingestion.IngestDataRequest.clientRequestId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientrequestid(), target);
  }

  // .Timestamp requestTime = 3;
  if (this->_internal_has_requesttime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::requesttime(this),
        _Internal::requesttime(this).GetCachedSize(), target, stream);
  }

  // repeated .Attribute attributes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .EventMetadata eventMetadata = 5;
  if (this->_internal_has_eventmetadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::eventmetadata(this),
        _Internal::eventmetadata(this).GetCachedSize(), target, stream);
  }

  // .dp.service.ingestion.IngestDataRequest.IngestionDataFrame ingestionDataFrame = 6;
  if (this->_internal_has_ingestiondataframe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::ingestiondataframe(this),
        _Internal::ingestiondataframe(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dp.service.ingestion.IngestDataRequest)
  return target;
}

size_t IngestDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dp.service.ingestion.IngestDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Attribute attributes = 4;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clientRequestId = 2;
  if (!this->_internal_clientrequestid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientrequestid());
  }

  // .Timestamp requestTime = 3;
  if (this->_internal_has_requesttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.requesttime_);
  }

  // .EventMetadata eventMetadata = 5;
  if (this->_internal_has_eventmetadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eventmetadata_);
  }

  // .dp.service.ingestion.IngestDataRequest.IngestionDataFrame ingestionDataFrame = 6;
  if (this->_internal_has_ingestiondataframe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ingestiondataframe_);
  }

  // uint32 providerId = 1;
  if (this->_internal_providerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_providerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IngestDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IngestDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IngestDataRequest::GetClassData() const { return &_class_data_; }


void IngestDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IngestDataRequest*>(&to_msg);
  auto& from = static_cast<const IngestDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dp.service.ingestion.IngestDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_clientrequestid().empty()) {
    _this->_internal_set_clientrequestid(from._internal_clientrequestid());
  }
  if (from._internal_has_requesttime()) {
    _this->_internal_mutable_requesttime()->::Timestamp::MergeFrom(
        from._internal_requesttime());
  }
  if (from._internal_has_eventmetadata()) {
    _this->_internal_mutable_eventmetadata()->::EventMetadata::MergeFrom(
        from._internal_eventmetadata());
  }
  if (from._internal_has_ingestiondataframe()) {
    _this->_internal_mutable_ingestiondataframe()->::dp::service::ingestion::IngestDataRequest_IngestionDataFrame::MergeFrom(
        from._internal_ingestiondataframe());
  }
  if (from._internal_providerid() != 0) {
    _this->_internal_set_providerid(from._internal_providerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IngestDataRequest::CopyFrom(const IngestDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dp.service.ingestion.IngestDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestDataRequest::IsInitialized() const {
  return true;
}

void IngestDataRequest::InternalSwap(IngestDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientrequestid_, lhs_arena,
      &other->_impl_.clientrequestid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngestDataRequest, _impl_.providerid_)
      + sizeof(IngestDataRequest::_impl_.providerid_)
      - PROTOBUF_FIELD_OFFSET(IngestDataRequest, _impl_.requesttime_)>(
          reinterpret_cast<char*>(&_impl_.requesttime_),
          reinterpret_cast<char*>(&other->_impl_.requesttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IngestDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ingestion_2eproto_getter, &descriptor_table_ingestion_2eproto_once,
      file_level_metadata_ingestion_2eproto[4]);
}

// ===================================================================

class IngestDataResponse_AckResult::_Internal {
 public:
};

IngestDataResponse_AckResult::IngestDataResponse_AckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dp.service.ingestion.IngestDataResponse.AckResult)
}
IngestDataResponse_AckResult::IngestDataResponse_AckResult(const IngestDataResponse_AckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IngestDataResponse_AckResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.numrows_){}
    , decltype(_impl_.numcolumns_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.numrows_, &from._impl_.numrows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numcolumns_) -
    reinterpret_cast<char*>(&_impl_.numrows_)) + sizeof(_impl_.numcolumns_));
  // @@protoc_insertion_point(copy_constructor:dp.service.ingestion.IngestDataResponse.AckResult)
}

inline void IngestDataResponse_AckResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.numrows_){0u}
    , decltype(_impl_.numcolumns_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IngestDataResponse_AckResult::~IngestDataResponse_AckResult() {
  // @@protoc_insertion_point(destructor:dp.service.ingestion.IngestDataResponse.AckResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IngestDataResponse_AckResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IngestDataResponse_AckResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IngestDataResponse_AckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:dp.service.ingestion.IngestDataResponse.AckResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.numrows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.numcolumns_) -
      reinterpret_cast<char*>(&_impl_.numrows_)) + sizeof(_impl_.numcolumns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngestDataResponse_AckResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 numRows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.numrows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 numColumns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.numcolumns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IngestDataResponse_AckResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dp.service.ingestion.IngestDataResponse.AckResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numRows = 1;
  if (this->_internal_numrows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_numrows(), target);
  }

  // uint32 numColumns = 2;
  if (this->_internal_numcolumns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numcolumns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dp.service.ingestion.IngestDataResponse.AckResult)
  return target;
}

size_t IngestDataResponse_AckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dp.service.ingestion.IngestDataResponse.AckResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 numRows = 1;
  if (this->_internal_numrows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numrows());
  }

  // uint32 numColumns = 2;
  if (this->_internal_numcolumns() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numcolumns());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IngestDataResponse_AckResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IngestDataResponse_AckResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IngestDataResponse_AckResult::GetClassData() const { return &_class_data_; }


void IngestDataResponse_AckResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IngestDataResponse_AckResult*>(&to_msg);
  auto& from = static_cast<const IngestDataResponse_AckResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dp.service.ingestion.IngestDataResponse.AckResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_numrows() != 0) {
    _this->_internal_set_numrows(from._internal_numrows());
  }
  if (from._internal_numcolumns() != 0) {
    _this->_internal_set_numcolumns(from._internal_numcolumns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IngestDataResponse_AckResult::CopyFrom(const IngestDataResponse_AckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dp.service.ingestion.IngestDataResponse.AckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestDataResponse_AckResult::IsInitialized() const {
  return true;
}

void IngestDataResponse_AckResult::InternalSwap(IngestDataResponse_AckResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngestDataResponse_AckResult, _impl_.numcolumns_)
      + sizeof(IngestDataResponse_AckResult::_impl_.numcolumns_)
      - PROTOBUF_FIELD_OFFSET(IngestDataResponse_AckResult, _impl_.numrows_)>(
          reinterpret_cast<char*>(&_impl_.numrows_),
          reinterpret_cast<char*>(&other->_impl_.numrows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IngestDataResponse_AckResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ingestion_2eproto_getter, &descriptor_table_ingestion_2eproto_once,
      file_level_metadata_ingestion_2eproto[5]);
}

// ===================================================================

class IngestDataResponse::_Internal {
 public:
  static const ::Timestamp& responsetime(const IngestDataResponse* msg);
  static const ::ExceptionalResult& exceptionalresult(const IngestDataResponse* msg);
  static const ::dp::service::ingestion::IngestDataResponse_AckResult& ackresult(const IngestDataResponse* msg);
};

const ::Timestamp&
IngestDataResponse::_Internal::responsetime(const IngestDataResponse* msg) {
  return *msg->_impl_.responsetime_;
}
const ::ExceptionalResult&
IngestDataResponse::_Internal::exceptionalresult(const IngestDataResponse* msg) {
  return *msg->_impl_.result_.exceptionalresult_;
}
const ::dp::service::ingestion::IngestDataResponse_AckResult&
IngestDataResponse::_Internal::ackresult(const IngestDataResponse* msg) {
  return *msg->_impl_.result_.ackresult_;
}
void IngestDataResponse::clear_responsetime() {
  if (GetArenaForAllocation() == nullptr && _impl_.responsetime_ != nullptr) {
    delete _impl_.responsetime_;
  }
  _impl_.responsetime_ = nullptr;
}
void IngestDataResponse::set_allocated_exceptionalresult(::ExceptionalResult* exceptionalresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (exceptionalresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exceptionalresult));
    if (message_arena != submessage_arena) {
      exceptionalresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exceptionalresult, submessage_arena);
    }
    set_has_exceptionalresult();
    _impl_.result_.exceptionalresult_ = exceptionalresult;
  }
  // @@protoc_insertion_point(field_set_allocated:dp.service.ingestion.IngestDataResponse.exceptionalResult)
}
void IngestDataResponse::clear_exceptionalresult() {
  if (_internal_has_exceptionalresult()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.exceptionalresult_;
    }
    clear_has_result();
  }
}
void IngestDataResponse::set_allocated_ackresult(::dp::service::ingestion::IngestDataResponse_AckResult* ackresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (ackresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ackresult);
    if (message_arena != submessage_arena) {
      ackresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ackresult, submessage_arena);
    }
    set_has_ackresult();
    _impl_.result_.ackresult_ = ackresult;
  }
  // @@protoc_insertion_point(field_set_allocated:dp.service.ingestion.IngestDataResponse.ackResult)
}
IngestDataResponse::IngestDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dp.service.ingestion.IngestDataResponse)
}
IngestDataResponse::IngestDataResponse(const IngestDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IngestDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientrequestid_){}
    , decltype(_impl_.responsetime_){nullptr}
    , decltype(_impl_.providerid_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientrequestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientrequestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientrequestid().empty()) {
    _this->_impl_.clientrequestid_.Set(from._internal_clientrequestid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_responsetime()) {
    _this->_impl_.responsetime_ = new ::Timestamp(*from._impl_.responsetime_);
  }
  _this->_impl_.providerid_ = from._impl_.providerid_;
  clear_has_result();
  switch (from.result_case()) {
    case kExceptionalResult: {
      _this->_internal_mutable_exceptionalresult()->::ExceptionalResult::MergeFrom(
          from._internal_exceptionalresult());
      break;
    }
    case kAckResult: {
      _this->_internal_mutable_ackresult()->::dp::service::ingestion::IngestDataResponse_AckResult::MergeFrom(
          from._internal_ackresult());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dp.service.ingestion.IngestDataResponse)
}

inline void IngestDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientrequestid_){}
    , decltype(_impl_.responsetime_){nullptr}
    , decltype(_impl_.providerid_){0u}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.clientrequestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientrequestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_result();
}

IngestDataResponse::~IngestDataResponse() {
  // @@protoc_insertion_point(destructor:dp.service.ingestion.IngestDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IngestDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientrequestid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.responsetime_;
  if (has_result()) {
    clear_result();
  }
}

void IngestDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IngestDataResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:dp.service.ingestion.IngestDataResponse)
  switch (result_case()) {
    case kExceptionalResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.exceptionalresult_;
      }
      break;
    }
    case kAckResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.ackresult_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}


void IngestDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dp.service.ingestion.IngestDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientrequestid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.responsetime_ != nullptr) {
    delete _impl_.responsetime_;
  }
  _impl_.responsetime_ = nullptr;
  _impl_.providerid_ = 0u;
  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngestDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 providerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.providerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientRequestId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientrequestid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dp.service.ingestion.IngestDataResponse.clientRequestId"));
        } else
          goto handle_unusual;
        continue;
      // .Timestamp responseTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_responsetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExceptionalResult exceptionalResult = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_exceptionalresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dp.service.ingestion.IngestDataResponse.AckResult ackResult = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ackresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IngestDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dp.service.ingestion.IngestDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 providerId = 1;
  if (this->_internal_providerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_providerid(), target);
  }

  // string clientRequestId = 2;
  if (!this->_internal_clientrequestid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientrequestid().data(), static_cast<int>(this->_internal_clientrequestid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dp.service.ingestion.IngestDataResponse.clientRequestId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientrequestid(), target);
  }

  // .Timestamp responseTime = 3;
  if (this->_internal_has_responsetime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::responsetime(this),
        _Internal::responsetime(this).GetCachedSize(), target, stream);
  }

  // .ExceptionalResult exceptionalResult = 10;
  if (_internal_has_exceptionalresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::exceptionalresult(this),
        _Internal::exceptionalresult(this).GetCachedSize(), target, stream);
  }

  // .dp.service.ingestion.IngestDataResponse.AckResult ackResult = 11;
  if (_internal_has_ackresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ackresult(this),
        _Internal::ackresult(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dp.service.ingestion.IngestDataResponse)
  return target;
}

size_t IngestDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dp.service.ingestion.IngestDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientRequestId = 2;
  if (!this->_internal_clientrequestid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientrequestid());
  }

  // .Timestamp responseTime = 3;
  if (this->_internal_has_responsetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.responsetime_);
  }

  // uint32 providerId = 1;
  if (this->_internal_providerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_providerid());
  }

  switch (result_case()) {
    // .ExceptionalResult exceptionalResult = 10;
    case kExceptionalResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.exceptionalresult_);
      break;
    }
    // .dp.service.ingestion.IngestDataResponse.AckResult ackResult = 11;
    case kAckResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.ackresult_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IngestDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IngestDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IngestDataResponse::GetClassData() const { return &_class_data_; }


void IngestDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IngestDataResponse*>(&to_msg);
  auto& from = static_cast<const IngestDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dp.service.ingestion.IngestDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientrequestid().empty()) {
    _this->_internal_set_clientrequestid(from._internal_clientrequestid());
  }
  if (from._internal_has_responsetime()) {
    _this->_internal_mutable_responsetime()->::Timestamp::MergeFrom(
        from._internal_responsetime());
  }
  if (from._internal_providerid() != 0) {
    _this->_internal_set_providerid(from._internal_providerid());
  }
  switch (from.result_case()) {
    case kExceptionalResult: {
      _this->_internal_mutable_exceptionalresult()->::ExceptionalResult::MergeFrom(
          from._internal_exceptionalresult());
      break;
    }
    case kAckResult: {
      _this->_internal_mutable_ackresult()->::dp::service::ingestion::IngestDataResponse_AckResult::MergeFrom(
          from._internal_ackresult());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IngestDataResponse::CopyFrom(const IngestDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dp.service.ingestion.IngestDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestDataResponse::IsInitialized() const {
  return true;
}

void IngestDataResponse::InternalSwap(IngestDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientrequestid_, lhs_arena,
      &other->_impl_.clientrequestid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngestDataResponse, _impl_.providerid_)
      + sizeof(IngestDataResponse::_impl_.providerid_)
      - PROTOBUF_FIELD_OFFSET(IngestDataResponse, _impl_.responsetime_)>(
          reinterpret_cast<char*>(&_impl_.responsetime_),
          reinterpret_cast<char*>(&other->_impl_.responsetime_));
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IngestDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ingestion_2eproto_getter, &descriptor_table_ingestion_2eproto_once,
      file_level_metadata_ingestion_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ingestion
}  // namespace service
}  // namespace dp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dp::service::ingestion::RegisterProviderRequest*
Arena::CreateMaybeMessage< ::dp::service::ingestion::RegisterProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dp::service::ingestion::RegisterProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dp::service::ingestion::RegisterProviderResponse_RegistrationResult*
Arena::CreateMaybeMessage< ::dp::service::ingestion::RegisterProviderResponse_RegistrationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dp::service::ingestion::RegisterProviderResponse_RegistrationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::dp::service::ingestion::RegisterProviderResponse*
Arena::CreateMaybeMessage< ::dp::service::ingestion::RegisterProviderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dp::service::ingestion::RegisterProviderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dp::service::ingestion::IngestDataRequest_IngestionDataFrame*
Arena::CreateMaybeMessage< ::dp::service::ingestion::IngestDataRequest_IngestionDataFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dp::service::ingestion::IngestDataRequest_IngestionDataFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::dp::service::ingestion::IngestDataRequest*
Arena::CreateMaybeMessage< ::dp::service::ingestion::IngestDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dp::service::ingestion::IngestDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dp::service::ingestion::IngestDataResponse_AckResult*
Arena::CreateMaybeMessage< ::dp::service::ingestion::IngestDataResponse_AckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dp::service::ingestion::IngestDataResponse_AckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::dp::service::ingestion::IngestDataResponse*
Arena::CreateMaybeMessage< ::dp::service::ingestion::IngestDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dp::service::ingestion::IngestDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
