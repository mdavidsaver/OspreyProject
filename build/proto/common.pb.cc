// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Attribute::Attribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeDefaultTypeInternal() {}
  union {
    Attribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeDefaultTypeInternal _Attribute_default_instance_;
PROTOBUF_CONSTEXPR EventMetadata::EventMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.starttimestamp_)*/nullptr
  , /*decltype(_impl_.stoptimestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventMetadataDefaultTypeInternal() {}
  union {
    EventMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventMetadataDefaultTypeInternal _EventMetadata_default_instance_;
PROTOBUF_CONSTEXPR Timestamp::Timestamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.epochseconds_)*/uint64_t{0u}
  , /*decltype(_impl_.nanoseconds_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDefaultTypeInternal _Timestamp_default_instance_;
PROTOBUF_CONSTEXPR TimestampList::TimestampList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimestampListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampListDefaultTypeInternal() {}
  union {
    TimestampList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampListDefaultTypeInternal _TimestampList_default_instance_;
PROTOBUF_CONSTEXPR SamplingClock::SamplingClock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.starttime_)*/nullptr
  , /*decltype(_impl_.periodnanos_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SamplingClockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SamplingClockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SamplingClockDefaultTypeInternal() {}
  union {
    SamplingClock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SamplingClockDefaultTypeInternal _SamplingClock_default_instance_;
PROTOBUF_CONSTEXPR DataTimestamps::DataTimestamps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataTimestampsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataTimestampsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataTimestampsDefaultTypeInternal() {}
  union {
    DataTimestamps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataTimestampsDefaultTypeInternal _DataTimestamps_default_instance_;
PROTOBUF_CONSTEXPR ExceptionalResult::ExceptionalResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exceptionalresultstatus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExceptionalResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExceptionalResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExceptionalResultDefaultTypeInternal() {}
  union {
    ExceptionalResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExceptionalResultDefaultTypeInternal _ExceptionalResult_default_instance_;
PROTOBUF_CONSTEXPR DataColumn::DataColumn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datavalues_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataColumnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataColumnDefaultTypeInternal() {}
  union {
    DataColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataColumnDefaultTypeInternal _DataColumn_default_instance_;
PROTOBUF_CONSTEXPR DataValue_ValueStatus::DataValue_ValueStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statuscode_)*/0
  , /*decltype(_impl_.severity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataValue_ValueStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataValue_ValueStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataValue_ValueStatusDefaultTypeInternal() {}
  union {
    DataValue_ValueStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataValue_ValueStatusDefaultTypeInternal _DataValue_ValueStatus_default_instance_;
PROTOBUF_CONSTEXPR DataValue::DataValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valuestatus_)*/nullptr
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataValueDefaultTypeInternal() {}
  union {
    DataValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataValueDefaultTypeInternal _DataValue_default_instance_;
PROTOBUF_CONSTEXPR Structure_Field::Structure_Field(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Structure_FieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Structure_FieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Structure_FieldDefaultTypeInternal() {}
  union {
    Structure_Field _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Structure_FieldDefaultTypeInternal _Structure_Field_default_instance_;
PROTOBUF_CONSTEXPR Structure::Structure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructureDefaultTypeInternal() {}
  union {
    Structure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructureDefaultTypeInternal _Structure_default_instance_;
PROTOBUF_CONSTEXPR Array::Array(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datavalues_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArrayDefaultTypeInternal() {}
  union {
    Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArrayDefaultTypeInternal _Array_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
static ::_pb::Metadata file_level_metadata_common_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Attribute, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Attribute, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventMetadata, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::EventMetadata, _impl_.starttimestamp_),
  PROTOBUF_FIELD_OFFSET(::EventMetadata, _impl_.stoptimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Timestamp, _impl_.epochseconds_),
  PROTOBUF_FIELD_OFFSET(::Timestamp, _impl_.nanoseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TimestampList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TimestampList, _impl_.timestamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SamplingClock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SamplingClock, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::SamplingClock, _impl_.periodnanos_),
  PROTOBUF_FIELD_OFFSET(::SamplingClock, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataTimestamps, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DataTimestamps, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::DataTimestamps, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExceptionalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExceptionalResult, _impl_.exceptionalresultstatus_),
  PROTOBUF_FIELD_OFFSET(::ExceptionalResult, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DataColumn, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::DataColumn, _impl_.datavalues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataValue_ValueStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DataValue_ValueStatus, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::DataValue_ValueStatus, _impl_.statuscode_),
  PROTOBUF_FIELD_OFFSET(::DataValue_ValueStatus, _impl_.severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DataValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::DataValue, _impl_.valuestatus_),
  PROTOBUF_FIELD_OFFSET(::DataValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Structure_Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Structure_Field, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Structure_Field, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Structure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Structure, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Array, _impl_.datavalues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Image, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::Image, _impl_.filetype_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Attribute)},
  { 8, -1, -1, sizeof(::EventMetadata)},
  { 17, -1, -1, sizeof(::Timestamp)},
  { 25, -1, -1, sizeof(::TimestampList)},
  { 32, -1, -1, sizeof(::SamplingClock)},
  { 41, -1, -1, sizeof(::DataTimestamps)},
  { 50, -1, -1, sizeof(::ExceptionalResult)},
  { 58, -1, -1, sizeof(::DataColumn)},
  { 66, -1, -1, sizeof(::DataValue_ValueStatus)},
  { 75, -1, -1, sizeof(::DataValue)},
  { 96, -1, -1, sizeof(::Structure_Field)},
  { 104, -1, -1, sizeof(::Structure)},
  { 111, -1, -1, sizeof(::Array)},
  { 118, -1, -1, sizeof(::Image)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Attribute_default_instance_._instance,
  &::_EventMetadata_default_instance_._instance,
  &::_Timestamp_default_instance_._instance,
  &::_TimestampList_default_instance_._instance,
  &::_SamplingClock_default_instance_._instance,
  &::_DataTimestamps_default_instance_._instance,
  &::_ExceptionalResult_default_instance_._instance,
  &::_DataColumn_default_instance_._instance,
  &::_DataValue_ValueStatus_default_instance_._instance,
  &::_DataValue_default_instance_._instance,
  &::_Structure_Field_default_instance_._instance,
  &::_Structure_default_instance_._instance,
  &::_Array_default_instance_._instance,
  &::_Image_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\"(\n\tAttribute\022\014\n\004name\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t\"k\n\rEventMetadata\022\023\n\013des"
  "cription\030\001 \001(\t\022\"\n\016startTimestamp\030\002 \001(\0132\n"
  ".Timestamp\022!\n\rstopTimestamp\030\003 \001(\0132\n.Time"
  "stamp\"6\n\tTimestamp\022\024\n\014epochSeconds\030\001 \001(\004"
  "\022\023\n\013nanoseconds\030\002 \001(\004\"/\n\rTimestampList\022\036"
  "\n\ntimestamps\030\001 \003(\0132\n.Timestamp\"R\n\rSampli"
  "ngClock\022\035\n\tstartTime\030\001 \001(\0132\n.Timestamp\022\023"
  "\n\013periodNanos\030\002 \001(\004\022\r\n\005count\030\003 \001(\r\"k\n\016Da"
  "taTimestamps\022\'\n\rsamplingClock\030\001 \001(\0132\016.Sa"
  "mplingClockH\000\022\'\n\rtimestampList\030\002 \001(\0132\016.T"
  "imestampListH\000B\007\n\005value\"\366\001\n\021ExceptionalR"
  "esult\022K\n\027exceptionalResultStatus\030\001 \001(\0162*"
  ".ExceptionalResult.ExceptionalResultStat"
  "us\022\017\n\007message\030\002 \001(\t\"\202\001\n\027ExceptionalResul"
  "tStatus\022\030\n\024RESULT_STATUS_REJECT\020\000\022\027\n\023RES"
  "ULT_STATUS_ERROR\020\001\022\027\n\023RESULT_STATUS_EMPT"
  "Y\020\002\022\033\n\027RESULT_STATUS_NOT_READY\020\003\":\n\nData"
  "Column\022\014\n\004name\030\001 \001(\t\022\036\n\ndataValues\030\002 \003(\013"
  "2\n.DataValue\"\242\006\n\tDataValue\022\025\n\013stringValu"
  "e\030\001 \001(\tH\000\022\026\n\014booleanValue\030\002 \001(\010H\000\022\023\n\tuin"
  "tValue\030\003 \001(\rH\000\022\024\n\nulongValue\030\004 \001(\004H\000\022\022\n\010"
  "intValue\030\005 \001(\021H\000\022\023\n\tlongValue\030\006 \001(\022H\000\022\024\n"
  "\nfloatValue\030\007 \001(\002H\000\022\025\n\013doubleValue\030\010 \001(\001"
  "H\000\022\030\n\016byteArrayValue\030\t \001(\014H\000\022\034\n\narrayVal"
  "ue\030\n \001(\0132\006.ArrayH\000\022$\n\016structureValue\030\013 \001"
  "(\0132\n.StructureH\000\022\034\n\nimageValue\030\014 \001(\0132\006.I"
  "mageH\000\022$\n\016timestampValue\030\r \001(\0132\n.Timesta"
  "mpH\000\022+\n\013valueStatus\030\017 \001(\0132\026.DataValue.Va"
  "lueStatus\032\214\003\n\013ValueStatus\022\017\n\007message\030\001 \001"
  "(\t\0225\n\nstatusCode\030\002 \001(\0162!.DataValue.Value"
  "Status.StatusCode\0221\n\010severity\030\003 \001(\0162\037.Da"
  "taValue.ValueStatus.Severity\"\235\001\n\nStatusC"
  "ode\022\r\n\tNO_STATUS\020\000\022\021\n\rDEVICE_STATUS\020\001\022\021\n"
  "\rDRIVER_STATUS\020\002\022\021\n\rRECORD_STATUS\020\003\022\r\n\tD"
  "B_STATUS\020\004\022\017\n\013CONF_STATUS\020\005\022\024\n\020UNDEFINED"
  "_STATUS\020\006\022\021\n\rCLIENT_STATUS\020\007\"b\n\010Severity"
  "\022\014\n\010NO_ALARM\020\000\022\017\n\013MINOR_ALARM\020\001\022\017\n\013MAJOR"
  "_ALARM\020\002\022\021\n\rINVALID_ALARM\020\003\022\023\n\017UNDEFINED"
  "_ALARM\020\004B\007\n\005value\"_\n\tStructure\022 \n\006fields"
  "\030\001 \003(\0132\020.Structure.Field\0320\n\005Field\022\014\n\004nam"
  "e\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n.DataValue\"\'\n\005Ar"
  "ray\022\036\n\ndataValues\030\001 \003(\0132\n.DataValue\"\230\001\n\005"
  "Image\022\r\n\005image\030\001 \001(\014\022!\n\010fileType\030\002 \001(\0162\017"
  ".Image.FileType\"]\n\010FileType\022\007\n\003RAW\020\000\022\010\n\004"
  "JPEG\020\001\022\007\n\003GIF\020\002\022\010\n\004TIFF\020\003\022\007\n\003BMP\020\004\022\007\n\003PN"
  "G\020\005\022\007\n\003EPS\020\006\022\007\n\003SVG\020\007\022\007\n\003PDF\020\010B#\n\037com.os"
  "preydcs.dp.grpc.v1.commonP\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 1915, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExceptionalResult_ExceptionalResultStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool ExceptionalResult_ExceptionalResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExceptionalResult_ExceptionalResultStatus ExceptionalResult::RESULT_STATUS_REJECT;
constexpr ExceptionalResult_ExceptionalResultStatus ExceptionalResult::RESULT_STATUS_ERROR;
constexpr ExceptionalResult_ExceptionalResultStatus ExceptionalResult::RESULT_STATUS_EMPTY;
constexpr ExceptionalResult_ExceptionalResultStatus ExceptionalResult::RESULT_STATUS_NOT_READY;
constexpr ExceptionalResult_ExceptionalResultStatus ExceptionalResult::ExceptionalResultStatus_MIN;
constexpr ExceptionalResult_ExceptionalResultStatus ExceptionalResult::ExceptionalResultStatus_MAX;
constexpr int ExceptionalResult::ExceptionalResultStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataValue_ValueStatus_StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool DataValue_ValueStatus_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::NO_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::DEVICE_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::DRIVER_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::RECORD_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::DB_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::CONF_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::UNDEFINED_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::CLIENT_STATUS;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::StatusCode_MIN;
constexpr DataValue_ValueStatus_StatusCode DataValue_ValueStatus::StatusCode_MAX;
constexpr int DataValue_ValueStatus::StatusCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataValue_ValueStatus_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool DataValue_ValueStatus_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataValue_ValueStatus_Severity DataValue_ValueStatus::NO_ALARM;
constexpr DataValue_ValueStatus_Severity DataValue_ValueStatus::MINOR_ALARM;
constexpr DataValue_ValueStatus_Severity DataValue_ValueStatus::MAJOR_ALARM;
constexpr DataValue_ValueStatus_Severity DataValue_ValueStatus::INVALID_ALARM;
constexpr DataValue_ValueStatus_Severity DataValue_ValueStatus::UNDEFINED_ALARM;
constexpr DataValue_ValueStatus_Severity DataValue_ValueStatus::Severity_MIN;
constexpr DataValue_ValueStatus_Severity DataValue_ValueStatus::Severity_MAX;
constexpr int DataValue_ValueStatus::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Image_FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool Image_FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Image_FileType Image::RAW;
constexpr Image_FileType Image::JPEG;
constexpr Image_FileType Image::GIF;
constexpr Image_FileType Image::TIFF;
constexpr Image_FileType Image::BMP;
constexpr Image_FileType Image::PNG;
constexpr Image_FileType Image::EPS;
constexpr Image_FileType Image::SVG;
constexpr Image_FileType Image::PDF;
constexpr Image_FileType Image::FileType_MIN;
constexpr Image_FileType Image::FileType_MAX;
constexpr int Image::FileType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Attribute::_Internal {
 public:
};

Attribute::Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Attribute)
}

inline void Attribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void Attribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:Attribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Attribute.name"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Attribute.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Attribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Attribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Attribute.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Attribute)
  return target;
}

size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Attribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attribute::GetClassData() const { return &_class_data_; }


void Attribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attribute*>(&to_msg);
  auto& from = static_cast<const Attribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Attribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class EventMetadata::_Internal {
 public:
  static const ::Timestamp& starttimestamp(const EventMetadata* msg);
  static const ::Timestamp& stoptimestamp(const EventMetadata* msg);
};

const ::Timestamp&
EventMetadata::_Internal::starttimestamp(const EventMetadata* msg) {
  return *msg->_impl_.starttimestamp_;
}
const ::Timestamp&
EventMetadata::_Internal::stoptimestamp(const EventMetadata* msg) {
  return *msg->_impl_.stoptimestamp_;
}
EventMetadata::EventMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EventMetadata)
}
EventMetadata::EventMetadata(const EventMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.starttimestamp_){nullptr}
    , decltype(_impl_.stoptimestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_starttimestamp()) {
    _this->_impl_.starttimestamp_ = new ::Timestamp(*from._impl_.starttimestamp_);
  }
  if (from._internal_has_stoptimestamp()) {
    _this->_impl_.stoptimestamp_ = new ::Timestamp(*from._impl_.stoptimestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:EventMetadata)
}

inline void EventMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.starttimestamp_){nullptr}
    , decltype(_impl_.stoptimestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventMetadata::~EventMetadata() {
  // @@protoc_insertion_point(destructor:EventMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.starttimestamp_;
  if (this != internal_default_instance()) delete _impl_.stoptimestamp_;
}

void EventMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:EventMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.starttimestamp_ != nullptr) {
    delete _impl_.starttimestamp_;
  }
  _impl_.starttimestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stoptimestamp_ != nullptr) {
    delete _impl_.stoptimestamp_;
  }
  _impl_.stoptimestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EventMetadata.description"));
        } else
          goto handle_unusual;
        continue;
      // .Timestamp startTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttimestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Timestamp stopTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stoptimestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventMetadata.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // .Timestamp startTimestamp = 2;
  if (this->_internal_has_starttimestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::starttimestamp(this),
        _Internal::starttimestamp(this).GetCachedSize(), target, stream);
  }

  // .Timestamp stopTimestamp = 3;
  if (this->_internal_has_stoptimestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stoptimestamp(this),
        _Internal::stoptimestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventMetadata)
  return target;
}

size_t EventMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .Timestamp startTimestamp = 2;
  if (this->_internal_has_starttimestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.starttimestamp_);
  }

  // .Timestamp stopTimestamp = 3;
  if (this->_internal_has_stoptimestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stoptimestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventMetadata::GetClassData() const { return &_class_data_; }


void EventMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventMetadata*>(&to_msg);
  auto& from = static_cast<const EventMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EventMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_starttimestamp()) {
    _this->_internal_mutable_starttimestamp()->::Timestamp::MergeFrom(
        from._internal_starttimestamp());
  }
  if (from._internal_has_stoptimestamp()) {
    _this->_internal_mutable_stoptimestamp()->::Timestamp::MergeFrom(
        from._internal_stoptimestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventMetadata::CopyFrom(const EventMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMetadata::IsInitialized() const {
  return true;
}

void EventMetadata::InternalSwap(EventMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventMetadata, _impl_.stoptimestamp_)
      + sizeof(EventMetadata::_impl_.stoptimestamp_)
      - PROTOBUF_FIELD_OFFSET(EventMetadata, _impl_.starttimestamp_)>(
          reinterpret_cast<char*>(&_impl_.starttimestamp_),
          reinterpret_cast<char*>(&other->_impl_.starttimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Timestamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.epochseconds_){}
    , decltype(_impl_.nanoseconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.epochseconds_, &from._impl_.epochseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nanoseconds_) -
    reinterpret_cast<char*>(&_impl_.epochseconds_)) + sizeof(_impl_.nanoseconds_));
  // @@protoc_insertion_point(copy_constructor:Timestamp)
}

inline void Timestamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.epochseconds_){uint64_t{0u}}
    , decltype(_impl_.nanoseconds_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:Timestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Timestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:Timestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.epochseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nanoseconds_) -
      reinterpret_cast<char*>(&_impl_.epochseconds_)) + sizeof(_impl_.nanoseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epochSeconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epochseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nanoseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nanoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Timestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Timestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epochSeconds = 1;
  if (this->_internal_epochseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epochseconds(), target);
  }

  // uint64 nanoseconds = 2;
  if (this->_internal_nanoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nanoseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Timestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 epochSeconds = 1;
  if (this->_internal_epochseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epochseconds());
  }

  // uint64 nanoseconds = 2;
  if (this->_internal_nanoseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nanoseconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Timestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timestamp::GetClassData() const { return &_class_data_; }


void Timestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Timestamp*>(&to_msg);
  auto& from = static_cast<const Timestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Timestamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epochseconds() != 0) {
    _this->_internal_set_epochseconds(from._internal_epochseconds());
  }
  if (from._internal_nanoseconds() != 0) {
    _this->_internal_set_nanoseconds(from._internal_nanoseconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.nanoseconds_)
      + sizeof(Timestamp::_impl_.nanoseconds_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, _impl_.epochseconds_)>(
          reinterpret_cast<char*>(&_impl_.epochseconds_),
          reinterpret_cast<char*>(&other->_impl_.epochseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class TimestampList::_Internal {
 public:
};

TimestampList::TimestampList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TimestampList)
}
TimestampList::TimestampList(const TimestampList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimestampList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){from._impl_.timestamps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TimestampList)
}

inline void TimestampList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimestampList::~TimestampList() {
  // @@protoc_insertion_point(destructor:TimestampList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimestampList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamps_.~RepeatedPtrField();
}

void TimestampList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimestampList::Clear() {
// @@protoc_insertion_point(message_clear_start:TimestampList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimestampList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Timestamp timestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timestamps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimestampList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimestampList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Timestamp timestamps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timestamps_size()); i < n; i++) {
    const auto& repfield = this->_internal_timestamps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimestampList)
  return target;
}

size_t TimestampList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TimestampList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Timestamp timestamps = 1;
  total_size += 1UL * this->_internal_timestamps_size();
  for (const auto& msg : this->_impl_.timestamps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimestampList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimestampList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimestampList::GetClassData() const { return &_class_data_; }


void TimestampList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimestampList*>(&to_msg);
  auto& from = static_cast<const TimestampList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TimestampList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timestamps_.MergeFrom(from._impl_.timestamps_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimestampList::CopyFrom(const TimestampList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimestampList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampList::IsInitialized() const {
  return true;
}

void TimestampList::InternalSwap(TimestampList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.timestamps_.InternalSwap(&other->_impl_.timestamps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class SamplingClock::_Internal {
 public:
  static const ::Timestamp& starttime(const SamplingClock* msg);
};

const ::Timestamp&
SamplingClock::_Internal::starttime(const SamplingClock* msg) {
  return *msg->_impl_.starttime_;
}
SamplingClock::SamplingClock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SamplingClock)
}
SamplingClock::SamplingClock(const SamplingClock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SamplingClock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){nullptr}
    , decltype(_impl_.periodnanos_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_starttime()) {
    _this->_impl_.starttime_ = new ::Timestamp(*from._impl_.starttime_);
  }
  ::memcpy(&_impl_.periodnanos_, &from._impl_.periodnanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.periodnanos_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:SamplingClock)
}

inline void SamplingClock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.starttime_){nullptr}
    , decltype(_impl_.periodnanos_){uint64_t{0u}}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SamplingClock::~SamplingClock() {
  // @@protoc_insertion_point(destructor:SamplingClock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SamplingClock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.starttime_;
}

void SamplingClock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SamplingClock::Clear() {
// @@protoc_insertion_point(message_clear_start:SamplingClock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.starttime_ != nullptr) {
    delete _impl_.starttime_;
  }
  _impl_.starttime_ = nullptr;
  ::memset(&_impl_.periodnanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.periodnanos_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplingClock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Timestamp startTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 periodNanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.periodnanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SamplingClock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SamplingClock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Timestamp startTime = 1;
  if (this->_internal_has_starttime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::starttime(this),
        _Internal::starttime(this).GetCachedSize(), target, stream);
  }

  // uint64 periodNanos = 2;
  if (this->_internal_periodnanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_periodnanos(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SamplingClock)
  return target;
}

size_t SamplingClock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SamplingClock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Timestamp startTime = 1;
  if (this->_internal_has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.starttime_);
  }

  // uint64 periodNanos = 2;
  if (this->_internal_periodnanos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_periodnanos());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SamplingClock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SamplingClock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SamplingClock::GetClassData() const { return &_class_data_; }


void SamplingClock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SamplingClock*>(&to_msg);
  auto& from = static_cast<const SamplingClock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SamplingClock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_starttime()) {
    _this->_internal_mutable_starttime()->::Timestamp::MergeFrom(
        from._internal_starttime());
  }
  if (from._internal_periodnanos() != 0) {
    _this->_internal_set_periodnanos(from._internal_periodnanos());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SamplingClock::CopyFrom(const SamplingClock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SamplingClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingClock::IsInitialized() const {
  return true;
}

void SamplingClock::InternalSwap(SamplingClock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SamplingClock, _impl_.count_)
      + sizeof(SamplingClock::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(SamplingClock, _impl_.starttime_)>(
          reinterpret_cast<char*>(&_impl_.starttime_),
          reinterpret_cast<char*>(&other->_impl_.starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplingClock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class DataTimestamps::_Internal {
 public:
  static const ::SamplingClock& samplingclock(const DataTimestamps* msg);
  static const ::TimestampList& timestamplist(const DataTimestamps* msg);
};

const ::SamplingClock&
DataTimestamps::_Internal::samplingclock(const DataTimestamps* msg) {
  return *msg->_impl_.value_.samplingclock_;
}
const ::TimestampList&
DataTimestamps::_Internal::timestamplist(const DataTimestamps* msg) {
  return *msg->_impl_.value_.timestamplist_;
}
void DataTimestamps::set_allocated_samplingclock(::SamplingClock* samplingclock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (samplingclock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(samplingclock);
    if (message_arena != submessage_arena) {
      samplingclock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, samplingclock, submessage_arena);
    }
    set_has_samplingclock();
    _impl_.value_.samplingclock_ = samplingclock;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTimestamps.samplingClock)
}
void DataTimestamps::set_allocated_timestamplist(::TimestampList* timestamplist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (timestamplist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timestamplist);
    if (message_arena != submessage_arena) {
      timestamplist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamplist, submessage_arena);
    }
    set_has_timestamplist();
    _impl_.value_.timestamplist_ = timestamplist;
  }
  // @@protoc_insertion_point(field_set_allocated:DataTimestamps.timestampList)
}
DataTimestamps::DataTimestamps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataTimestamps)
}
DataTimestamps::DataTimestamps(const DataTimestamps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataTimestamps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kSamplingClock: {
      _this->_internal_mutable_samplingclock()->::SamplingClock::MergeFrom(
          from._internal_samplingclock());
      break;
    }
    case kTimestampList: {
      _this->_internal_mutable_timestamplist()->::TimestampList::MergeFrom(
          from._internal_timestamplist());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DataTimestamps)
}

inline void DataTimestamps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

DataTimestamps::~DataTimestamps() {
  // @@protoc_insertion_point(destructor:DataTimestamps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataTimestamps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void DataTimestamps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataTimestamps::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:DataTimestamps)
  switch (value_case()) {
    case kSamplingClock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.samplingclock_;
      }
      break;
    }
    case kTimestampList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.timestamplist_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void DataTimestamps::Clear() {
// @@protoc_insertion_point(message_clear_start:DataTimestamps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataTimestamps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SamplingClock samplingClock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_samplingclock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TimestampList timestampList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamplist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataTimestamps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataTimestamps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SamplingClock samplingClock = 1;
  if (_internal_has_samplingclock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::samplingclock(this),
        _Internal::samplingclock(this).GetCachedSize(), target, stream);
  }

  // .TimestampList timestampList = 2;
  if (_internal_has_timestamplist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamplist(this),
        _Internal::timestamplist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataTimestamps)
  return target;
}

size_t DataTimestamps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataTimestamps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .SamplingClock samplingClock = 1;
    case kSamplingClock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.samplingclock_);
      break;
    }
    // .TimestampList timestampList = 2;
    case kTimestampList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.timestamplist_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataTimestamps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataTimestamps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataTimestamps::GetClassData() const { return &_class_data_; }


void DataTimestamps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataTimestamps*>(&to_msg);
  auto& from = static_cast<const DataTimestamps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataTimestamps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kSamplingClock: {
      _this->_internal_mutable_samplingclock()->::SamplingClock::MergeFrom(
          from._internal_samplingclock());
      break;
    }
    case kTimestampList: {
      _this->_internal_mutable_timestamplist()->::TimestampList::MergeFrom(
          from._internal_timestamplist());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataTimestamps::CopyFrom(const DataTimestamps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataTimestamps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTimestamps::IsInitialized() const {
  return true;
}

void DataTimestamps::InternalSwap(DataTimestamps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataTimestamps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class ExceptionalResult::_Internal {
 public:
};

ExceptionalResult::ExceptionalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExceptionalResult)
}
ExceptionalResult::ExceptionalResult(const ExceptionalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExceptionalResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.exceptionalresultstatus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.exceptionalresultstatus_ = from._impl_.exceptionalresultstatus_;
  // @@protoc_insertion_point(copy_constructor:ExceptionalResult)
}

inline void ExceptionalResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.exceptionalresultstatus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExceptionalResult::~ExceptionalResult() {
  // @@protoc_insertion_point(destructor:ExceptionalResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExceptionalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ExceptionalResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExceptionalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ExceptionalResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.exceptionalresultstatus_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExceptionalResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ExceptionalResult.ExceptionalResultStatus exceptionalResultStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exceptionalresultstatus(static_cast<::ExceptionalResult_ExceptionalResultStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExceptionalResult.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExceptionalResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExceptionalResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExceptionalResult.ExceptionalResultStatus exceptionalResultStatus = 1;
  if (this->_internal_exceptionalresultstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_exceptionalresultstatus(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExceptionalResult.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExceptionalResult)
  return target;
}

size_t ExceptionalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExceptionalResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .ExceptionalResult.ExceptionalResultStatus exceptionalResultStatus = 1;
  if (this->_internal_exceptionalresultstatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exceptionalresultstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExceptionalResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExceptionalResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExceptionalResult::GetClassData() const { return &_class_data_; }


void ExceptionalResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExceptionalResult*>(&to_msg);
  auto& from = static_cast<const ExceptionalResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExceptionalResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_exceptionalresultstatus() != 0) {
    _this->_internal_set_exceptionalresultstatus(from._internal_exceptionalresultstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExceptionalResult::CopyFrom(const ExceptionalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExceptionalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionalResult::IsInitialized() const {
  return true;
}

void ExceptionalResult::InternalSwap(ExceptionalResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.exceptionalresultstatus_, other->_impl_.exceptionalresultstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExceptionalResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class DataColumn::_Internal {
 public:
};

DataColumn::DataColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataColumn)
}
DataColumn::DataColumn(const DataColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataColumn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datavalues_){from._impl_.datavalues_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DataColumn)
}

inline void DataColumn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datavalues_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataColumn::~DataColumn() {
  // @@protoc_insertion_point(destructor:DataColumn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datavalues_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void DataColumn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:DataColumn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datavalues_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataColumn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DataColumn.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .DataValue dataValues = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datavalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataColumn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataColumn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataColumn.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .DataValue dataValues = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datavalues_size()); i < n; i++) {
    const auto& repfield = this->_internal_datavalues(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataColumn)
  return target;
}

size_t DataColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataColumn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataValue dataValues = 2;
  total_size += 1UL * this->_internal_datavalues_size();
  for (const auto& msg : this->_impl_.datavalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataColumn::GetClassData() const { return &_class_data_; }


void DataColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataColumn*>(&to_msg);
  auto& from = static_cast<const DataColumn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataColumn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datavalues_.MergeFrom(from._impl_.datavalues_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataColumn::CopyFrom(const DataColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataColumn::IsInitialized() const {
  return true;
}

void DataColumn::InternalSwap(DataColumn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datavalues_.InternalSwap(&other->_impl_.datavalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataColumn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class DataValue_ValueStatus::_Internal {
 public:
};

DataValue_ValueStatus::DataValue_ValueStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataValue.ValueStatus)
}
DataValue_ValueStatus::DataValue_ValueStatus(const DataValue_ValueStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataValue_ValueStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.statuscode_){}
    , decltype(_impl_.severity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.statuscode_, &from._impl_.statuscode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.severity_) -
    reinterpret_cast<char*>(&_impl_.statuscode_)) + sizeof(_impl_.severity_));
  // @@protoc_insertion_point(copy_constructor:DataValue.ValueStatus)
}

inline void DataValue_ValueStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.statuscode_){0}
    , decltype(_impl_.severity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataValue_ValueStatus::~DataValue_ValueStatus() {
  // @@protoc_insertion_point(destructor:DataValue.ValueStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataValue_ValueStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void DataValue_ValueStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataValue_ValueStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:DataValue.ValueStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.statuscode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.severity_) -
      reinterpret_cast<char*>(&_impl_.statuscode_)) + sizeof(_impl_.severity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataValue_ValueStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DataValue.ValueStatus.message"));
        } else
          goto handle_unusual;
        continue;
      // .DataValue.ValueStatus.StatusCode statusCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statuscode(static_cast<::DataValue_ValueStatus_StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .DataValue.ValueStatus.Severity severity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::DataValue_ValueStatus_Severity>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataValue_ValueStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataValue.ValueStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataValue.ValueStatus.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .DataValue.ValueStatus.StatusCode statusCode = 2;
  if (this->_internal_statuscode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_statuscode(), target);
  }

  // .DataValue.ValueStatus.Severity severity = 3;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_severity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataValue.ValueStatus)
  return target;
}

size_t DataValue_ValueStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataValue.ValueStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .DataValue.ValueStatus.StatusCode statusCode = 2;
  if (this->_internal_statuscode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_statuscode());
  }

  // .DataValue.ValueStatus.Severity severity = 3;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataValue_ValueStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataValue_ValueStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataValue_ValueStatus::GetClassData() const { return &_class_data_; }


void DataValue_ValueStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataValue_ValueStatus*>(&to_msg);
  auto& from = static_cast<const DataValue_ValueStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataValue.ValueStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_statuscode() != 0) {
    _this->_internal_set_statuscode(from._internal_statuscode());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataValue_ValueStatus::CopyFrom(const DataValue_ValueStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataValue.ValueStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataValue_ValueStatus::IsInitialized() const {
  return true;
}

void DataValue_ValueStatus::InternalSwap(DataValue_ValueStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataValue_ValueStatus, _impl_.severity_)
      + sizeof(DataValue_ValueStatus::_impl_.severity_)
      - PROTOBUF_FIELD_OFFSET(DataValue_ValueStatus, _impl_.statuscode_)>(
          reinterpret_cast<char*>(&_impl_.statuscode_),
          reinterpret_cast<char*>(&other->_impl_.statuscode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataValue_ValueStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class DataValue::_Internal {
 public:
  static const ::Array& arrayvalue(const DataValue* msg);
  static const ::Structure& structurevalue(const DataValue* msg);
  static const ::Image& imagevalue(const DataValue* msg);
  static const ::Timestamp& timestampvalue(const DataValue* msg);
  static const ::DataValue_ValueStatus& valuestatus(const DataValue* msg);
};

const ::Array&
DataValue::_Internal::arrayvalue(const DataValue* msg) {
  return *msg->_impl_.value_.arrayvalue_;
}
const ::Structure&
DataValue::_Internal::structurevalue(const DataValue* msg) {
  return *msg->_impl_.value_.structurevalue_;
}
const ::Image&
DataValue::_Internal::imagevalue(const DataValue* msg) {
  return *msg->_impl_.value_.imagevalue_;
}
const ::Timestamp&
DataValue::_Internal::timestampvalue(const DataValue* msg) {
  return *msg->_impl_.value_.timestampvalue_;
}
const ::DataValue_ValueStatus&
DataValue::_Internal::valuestatus(const DataValue* msg) {
  return *msg->_impl_.valuestatus_;
}
void DataValue::set_allocated_arrayvalue(::Array* arrayvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (arrayvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arrayvalue);
    if (message_arena != submessage_arena) {
      arrayvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrayvalue, submessage_arena);
    }
    set_has_arrayvalue();
    _impl_.value_.arrayvalue_ = arrayvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:DataValue.arrayValue)
}
void DataValue::set_allocated_structurevalue(::Structure* structurevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (structurevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(structurevalue);
    if (message_arena != submessage_arena) {
      structurevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structurevalue, submessage_arena);
    }
    set_has_structurevalue();
    _impl_.value_.structurevalue_ = structurevalue;
  }
  // @@protoc_insertion_point(field_set_allocated:DataValue.structureValue)
}
void DataValue::set_allocated_imagevalue(::Image* imagevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (imagevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagevalue);
    if (message_arena != submessage_arena) {
      imagevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagevalue, submessage_arena);
    }
    set_has_imagevalue();
    _impl_.value_.imagevalue_ = imagevalue;
  }
  // @@protoc_insertion_point(field_set_allocated:DataValue.imageValue)
}
void DataValue::set_allocated_timestampvalue(::Timestamp* timestampvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (timestampvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timestampvalue);
    if (message_arena != submessage_arena) {
      timestampvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestampvalue, submessage_arena);
    }
    set_has_timestampvalue();
    _impl_.value_.timestampvalue_ = timestampvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:DataValue.timestampValue)
}
DataValue::DataValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataValue)
}
DataValue::DataValue(const DataValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valuestatus_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_valuestatus()) {
    _this->_impl_.valuestatus_ = new ::DataValue_ValueStatus(*from._impl_.valuestatus_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kBooleanValue: {
      _this->_internal_set_booleanvalue(from._internal_booleanvalue());
      break;
    }
    case kUintValue: {
      _this->_internal_set_uintvalue(from._internal_uintvalue());
      break;
    }
    case kUlongValue: {
      _this->_internal_set_ulongvalue(from._internal_ulongvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kLongValue: {
      _this->_internal_set_longvalue(from._internal_longvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_doublevalue(from._internal_doublevalue());
      break;
    }
    case kByteArrayValue: {
      _this->_internal_set_bytearrayvalue(from._internal_bytearrayvalue());
      break;
    }
    case kArrayValue: {
      _this->_internal_mutable_arrayvalue()->::Array::MergeFrom(
          from._internal_arrayvalue());
      break;
    }
    case kStructureValue: {
      _this->_internal_mutable_structurevalue()->::Structure::MergeFrom(
          from._internal_structurevalue());
      break;
    }
    case kImageValue: {
      _this->_internal_mutable_imagevalue()->::Image::MergeFrom(
          from._internal_imagevalue());
      break;
    }
    case kTimestampValue: {
      _this->_internal_mutable_timestampvalue()->::Timestamp::MergeFrom(
          from._internal_timestampvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DataValue)
}

inline void DataValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.valuestatus_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

DataValue::~DataValue() {
  // @@protoc_insertion_point(destructor:DataValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.valuestatus_;
  if (has_value()) {
    clear_value();
  }
}

void DataValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:DataValue)
  switch (value_case()) {
    case kStringValue: {
      _impl_.value_.stringvalue_.Destroy();
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kUintValue: {
      // No need to clear
      break;
    }
    case kUlongValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kByteArrayValue: {
      _impl_.value_.bytearrayvalue_.Destroy();
      break;
    }
    case kArrayValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.arrayvalue_;
      }
      break;
    }
    case kStructureValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.structurevalue_;
      }
      break;
    }
    case kImageValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.imagevalue_;
      }
      break;
    }
    case kTimestampValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.timestampvalue_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void DataValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DataValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.valuestatus_ != nullptr) {
    delete _impl_.valuestatus_;
  }
  _impl_.valuestatus_ = nullptr;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stringValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DataValue.stringValue"));
        } else
          goto handle_unusual;
        continue;
      // bool booleanValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_booleanvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uintValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_uintvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ulongValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_ulongvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 intValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 longValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_longvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float floatValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _internal_set_floatvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double doubleValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _internal_set_doublevalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes byteArrayValue = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_bytearrayvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Array arrayValue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrayvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Structure structureValue = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_structurevalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Image imageValue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagevalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Timestamp timestampValue = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestampvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DataValue.ValueStatus valueStatus = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuestatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stringValue = 1;
  if (_internal_has_stringvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataValue.stringValue");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stringvalue(), target);
  }

  // bool booleanValue = 2;
  if (_internal_has_booleanvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_booleanvalue(), target);
  }

  // uint32 uintValue = 3;
  if (_internal_has_uintvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uintvalue(), target);
  }

  // uint64 ulongValue = 4;
  if (_internal_has_ulongvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ulongvalue(), target);
  }

  // sint32 intValue = 5;
  if (_internal_has_intvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_intvalue(), target);
  }

  // sint64 longValue = 6;
  if (_internal_has_longvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(6, this->_internal_longvalue(), target);
  }

  // float floatValue = 7;
  if (_internal_has_floatvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_floatvalue(), target);
  }

  // double doubleValue = 8;
  if (_internal_has_doublevalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_doublevalue(), target);
  }

  // bytes byteArrayValue = 9;
  if (_internal_has_bytearrayvalue()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_bytearrayvalue(), target);
  }

  // .Array arrayValue = 10;
  if (_internal_has_arrayvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::arrayvalue(this),
        _Internal::arrayvalue(this).GetCachedSize(), target, stream);
  }

  // .Structure structureValue = 11;
  if (_internal_has_structurevalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::structurevalue(this),
        _Internal::structurevalue(this).GetCachedSize(), target, stream);
  }

  // .Image imageValue = 12;
  if (_internal_has_imagevalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::imagevalue(this),
        _Internal::imagevalue(this).GetCachedSize(), target, stream);
  }

  // .Timestamp timestampValue = 13;
  if (_internal_has_timestampvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::timestampvalue(this),
        _Internal::timestampvalue(this).GetCachedSize(), target, stream);
  }

  // .DataValue.ValueStatus valueStatus = 15;
  if (this->_internal_has_valuestatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::valuestatus(this),
        _Internal::valuestatus(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataValue)
  return target;
}

size_t DataValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DataValue.ValueStatus valueStatus = 15;
  if (this->_internal_has_valuestatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.valuestatus_);
  }

  switch (value_case()) {
    // string stringValue = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
      break;
    }
    // bool booleanValue = 2;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // uint32 uintValue = 3;
    case kUintValue: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uintvalue());
      break;
    }
    // uint64 ulongValue = 4;
    case kUlongValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ulongvalue());
      break;
    }
    // sint32 intValue = 5;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_intvalue());
      break;
    }
    // sint64 longValue = 6;
    case kLongValue: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_longvalue());
      break;
    }
    // float floatValue = 7;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double doubleValue = 8;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bytes byteArrayValue = 9;
    case kByteArrayValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytearrayvalue());
      break;
    }
    // .Array arrayValue = 10;
    case kArrayValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.arrayvalue_);
      break;
    }
    // .Structure structureValue = 11;
    case kStructureValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.structurevalue_);
      break;
    }
    // .Image imageValue = 12;
    case kImageValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.imagevalue_);
      break;
    }
    // .Timestamp timestampValue = 13;
    case kTimestampValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.timestampvalue_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataValue::GetClassData() const { return &_class_data_; }


void DataValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataValue*>(&to_msg);
  auto& from = static_cast<const DataValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_valuestatus()) {
    _this->_internal_mutable_valuestatus()->::DataValue_ValueStatus::MergeFrom(
        from._internal_valuestatus());
  }
  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kBooleanValue: {
      _this->_internal_set_booleanvalue(from._internal_booleanvalue());
      break;
    }
    case kUintValue: {
      _this->_internal_set_uintvalue(from._internal_uintvalue());
      break;
    }
    case kUlongValue: {
      _this->_internal_set_ulongvalue(from._internal_ulongvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kLongValue: {
      _this->_internal_set_longvalue(from._internal_longvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_doublevalue(from._internal_doublevalue());
      break;
    }
    case kByteArrayValue: {
      _this->_internal_set_bytearrayvalue(from._internal_bytearrayvalue());
      break;
    }
    case kArrayValue: {
      _this->_internal_mutable_arrayvalue()->::Array::MergeFrom(
          from._internal_arrayvalue());
      break;
    }
    case kStructureValue: {
      _this->_internal_mutable_structurevalue()->::Structure::MergeFrom(
          from._internal_structurevalue());
      break;
    }
    case kImageValue: {
      _this->_internal_mutable_imagevalue()->::Image::MergeFrom(
          from._internal_imagevalue());
      break;
    }
    case kTimestampValue: {
      _this->_internal_mutable_timestampvalue()->::Timestamp::MergeFrom(
          from._internal_timestampvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataValue::CopyFrom(const DataValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataValue::IsInitialized() const {
  return true;
}

void DataValue::InternalSwap(DataValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.valuestatus_, other->_impl_.valuestatus_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class Structure_Field::_Internal {
 public:
  static const ::DataValue& value(const Structure_Field* msg);
};

const ::DataValue&
Structure_Field::_Internal::value(const Structure_Field* msg) {
  return *msg->_impl_.value_;
}
Structure_Field::Structure_Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Structure.Field)
}
Structure_Field::Structure_Field(const Structure_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Structure_Field* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::DataValue(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:Structure.Field)
}

inline void Structure_Field::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Structure_Field::~Structure_Field() {
  // @@protoc_insertion_point(destructor:Structure.Field)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Structure_Field::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Structure_Field::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Structure_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:Structure.Field)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Structure_Field::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Structure.Field.name"));
        } else
          goto handle_unusual;
        continue;
      // .DataValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Structure_Field::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Structure.Field)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Structure.Field.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .DataValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Structure.Field)
  return target;
}

size_t Structure_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Structure.Field)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .DataValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Structure_Field::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Structure_Field::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Structure_Field::GetClassData() const { return &_class_data_; }


void Structure_Field::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Structure_Field*>(&to_msg);
  auto& from = static_cast<const Structure_Field&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Structure.Field)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::DataValue::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Structure_Field::CopyFrom(const Structure_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Structure.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Structure_Field::IsInitialized() const {
  return true;
}

void Structure_Field::InternalSwap(Structure_Field* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Structure_Field::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

class Structure::_Internal {
 public:
};

Structure::Structure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Structure)
}
Structure::Structure(const Structure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Structure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Structure)
}

inline void Structure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Structure::~Structure() {
  // @@protoc_insertion_point(destructor:Structure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Structure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
}

void Structure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Structure::Clear() {
// @@protoc_insertion_point(message_clear_start:Structure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Structure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Structure.Field fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Structure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Structure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Structure.Field fields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Structure)
  return target;
}

size_t Structure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Structure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Structure.Field fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Structure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Structure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Structure::GetClassData() const { return &_class_data_; }


void Structure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Structure*>(&to_msg);
  auto& from = static_cast<const Structure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Structure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Structure::CopyFrom(const Structure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Structure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Structure::IsInitialized() const {
  return true;
}

void Structure::InternalSwap(Structure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Structure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class Array::_Internal {
 public:
};

Array::Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Array)
}
Array::Array(const Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Array* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datavalues_){from._impl_.datavalues_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Array)
}

inline void Array::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datavalues_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Array)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datavalues_.~RepeatedPtrField();
}

void Array::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Array)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datavalues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Array::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DataValue dataValues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datavalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Array::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Array)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DataValue dataValues = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datavalues_size()); i < n; i++) {
    const auto& repfield = this->_internal_datavalues(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Array)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataValue dataValues = 1;
  total_size += 1UL * this->_internal_datavalues_size();
  for (const auto& msg : this->_impl_.datavalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Array::GetClassData() const { return &_class_data_; }


void Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Array*>(&to_msg);
  auto& from = static_cast<const Array&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Array)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datavalues_.MergeFrom(from._impl_.datavalues_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  return true;
}

void Array::InternalSwap(Array* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datavalues_.InternalSwap(&other->_impl_.datavalues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Array::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Image* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.filetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.filetype_ = from._impl_.filetype_;
  // @@protoc_insertion_point(copy_constructor:Image)
}

inline void Image::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.filetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void Image::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  _impl_.filetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Image.FileType fileType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filetype(static_cast<::Image_FileType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  // .Image.FileType fileType = 2;
  if (this->_internal_filetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_filetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // .Image.FileType fileType = 2;
  if (this->_internal_filetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_filetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }


void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Image*>(&to_msg);
  auto& from = static_cast<const Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Image)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_filetype() != 0) {
    _this->_internal_set_filetype(from._internal_filetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  swap(_impl_.filetype_, other->_impl_.filetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Attribute*
Arena::CreateMaybeMessage< ::Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::EventMetadata*
Arena::CreateMaybeMessage< ::EventMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Timestamp*
Arena::CreateMaybeMessage< ::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::TimestampList*
Arena::CreateMaybeMessage< ::TimestampList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TimestampList >(arena);
}
template<> PROTOBUF_NOINLINE ::SamplingClock*
Arena::CreateMaybeMessage< ::SamplingClock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SamplingClock >(arena);
}
template<> PROTOBUF_NOINLINE ::DataTimestamps*
Arena::CreateMaybeMessage< ::DataTimestamps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataTimestamps >(arena);
}
template<> PROTOBUF_NOINLINE ::ExceptionalResult*
Arena::CreateMaybeMessage< ::ExceptionalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExceptionalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::DataColumn*
Arena::CreateMaybeMessage< ::DataColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::DataValue_ValueStatus*
Arena::CreateMaybeMessage< ::DataValue_ValueStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataValue_ValueStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::DataValue*
Arena::CreateMaybeMessage< ::DataValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Structure_Field*
Arena::CreateMaybeMessage< ::Structure_Field >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Structure_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::Structure*
Arena::CreateMaybeMessage< ::Structure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Structure >(arena);
}
template<> PROTOBUF_NOINLINE ::Array*
Arena::CreateMaybeMessage< ::Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Array >(arena);
}
template<> PROTOBUF_NOINLINE ::Image*
Arena::CreateMaybeMessage< ::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Image >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
