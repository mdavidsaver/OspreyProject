// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ingestion.proto
// Original file comments:
//
// ingestion.proto
//
// Contains RPC messages and interface specific to the Ingestion Service.
//
#ifndef GRPC_ingestion_2eproto__INCLUDED
#define GRPC_ingestion_2eproto__INCLUDED

#include "ingestion.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace dp {
namespace service {
namespace ingestion {

//
// ------------------- RPC Interfaces ---------------------------
//
//
//
// The Ingestion Service Interface
//
// Defines RPC operations for data provider registration and ingestion.
//
class DpIngestionService final {
 public:
  static constexpr char const* service_full_name() {
    return "dp.service.ingestion.DpIngestionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // registerProvider: Registers an ingestion data provider and obtains providerId.
    //
    // The provider registration API is not yet implemented.  For now, data ingestion clients should send a unique
    // integer identifier in ingestion requests to distinguish providers as appropriate.
    //
    // TODO: this RPC is not yet implemented.
    virtual ::grpc::Status registerProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::dp::service::ingestion::RegisterProviderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::RegisterProviderResponse>> AsyncregisterProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::RegisterProviderResponse>>(AsyncregisterProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::RegisterProviderResponse>> PrepareAsyncregisterProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::RegisterProviderResponse>>(PrepareAsyncregisterProviderRaw(context, request, cq));
    }
    //
    // ingestData: Unary (non-streaming) data ingestion.
    //
    // This method sends a single IngestDataRequest and receives a single IngestDataResponse.  Validation,
    // rejection / acknowledgment, asynchronous handling, and request status reporting is otherwise the same as for the
    // ingestDataStream() method.
    virtual ::grpc::Status ingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::dp::service::ingestion::IngestDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::IngestDataResponse>> AsyncingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::IngestDataResponse>>(AsyncingestDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::IngestDataResponse>> PrepareAsyncingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::IngestDataResponse>>(PrepareAsyncingestDataRaw(context, request, cq));
    }
    //
    // ingestDataStream(): Bidirectional streaming data ingestion.
    //
    // The Ingestion Service performs initial validation on each IngestDataRequest in the stream, and replies immediately
    // with a IngestDataResponse message indicating acknowledgement for a valid request, or rejection of an invalid one.
    // The request is then added to a queue for async ingestion handling.
    //
    // The ingestion handling of each request in the stream is performed asynchronously.  The Ingestion Service writes
    // data from the request to the "buckets" collection in MongoDB, adding one document to the collection for each
    // "column" of data in the request's DataFrame object.
    //
    // A separate MongoDB "requestStatus" collection is used to note the processing status of each request,
    // with a document for each handled request.  The collection is keyed by the providerId and clientRequestId
    // specified in the IngestDataRequest.  This collection can be used by an administrative monitoring process
    // to detect and notify about errors in the ingestion process.
    // TODO: add API for querying requestStatus by providerId and clientRequestId.
    //
    // The method returns a stream of IngestDataResponse messages, one per request.  Each response includes providerId
    // and clientRequestId for use by the client in mapping a response to the corresponding request.  The response
    // message only indicates if validation succeeded or failed.  Because ingestion handling is performed asynchronously,
    // the MongoDB "requestStatus" collection must be used to determine the success or failure of individual requests.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>> ingestDataStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>>(ingestDataStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>> AsyncingestDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>>(AsyncingestDataStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>> PrepareAsyncingestDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>>(PrepareAsyncingestDataStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // registerProvider: Registers an ingestion data provider and obtains providerId.
      //
      // The provider registration API is not yet implemented.  For now, data ingestion clients should send a unique
      // integer identifier in ingestion requests to distinguish providers as appropriate.
      //
      // TODO: this RPC is not yet implemented.
      virtual void registerProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest* request, ::dp::service::ingestion::RegisterProviderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest* request, ::dp::service::ingestion::RegisterProviderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // ingestData: Unary (non-streaming) data ingestion.
      //
      // This method sends a single IngestDataRequest and receives a single IngestDataResponse.  Validation,
      // rejection / acknowledgment, asynchronous handling, and request status reporting is otherwise the same as for the
      // ingestDataStream() method.
      virtual void ingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest* request, ::dp::service::ingestion::IngestDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest* request, ::dp::service::ingestion::IngestDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // ingestDataStream(): Bidirectional streaming data ingestion.
      //
      // The Ingestion Service performs initial validation on each IngestDataRequest in the stream, and replies immediately
      // with a IngestDataResponse message indicating acknowledgement for a valid request, or rejection of an invalid one.
      // The request is then added to a queue for async ingestion handling.
      //
      // The ingestion handling of each request in the stream is performed asynchronously.  The Ingestion Service writes
      // data from the request to the "buckets" collection in MongoDB, adding one document to the collection for each
      // "column" of data in the request's DataFrame object.
      //
      // A separate MongoDB "requestStatus" collection is used to note the processing status of each request,
      // with a document for each handled request.  The collection is keyed by the providerId and clientRequestId
      // specified in the IngestDataRequest.  This collection can be used by an administrative monitoring process
      // to detect and notify about errors in the ingestion process.
      // TODO: add API for querying requestStatus by providerId and clientRequestId.
      //
      // The method returns a stream of IngestDataResponse messages, one per request.  Each response includes providerId
      // and clientRequestId for use by the client in mapping a response to the corresponding request.  The response
      // message only indicates if validation succeeded or failed.  Because ingestion handling is performed asynchronously,
      // the MongoDB "requestStatus" collection must be used to determine the success or failure of individual requests.
      virtual void ingestDataStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::dp::service::ingestion::IngestDataRequest,::dp::service::ingestion::IngestDataResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::RegisterProviderResponse>* AsyncregisterProviderRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::RegisterProviderResponse>* PrepareAsyncregisterProviderRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::IngestDataResponse>* AsyncingestDataRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dp::service::ingestion::IngestDataResponse>* PrepareAsyncingestDataRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* ingestDataStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* AsyncingestDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* PrepareAsyncingestDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status registerProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::dp::service::ingestion::RegisterProviderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::RegisterProviderResponse>> AsyncregisterProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::RegisterProviderResponse>>(AsyncregisterProviderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::RegisterProviderResponse>> PrepareAsyncregisterProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::RegisterProviderResponse>>(PrepareAsyncregisterProviderRaw(context, request, cq));
    }
    ::grpc::Status ingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::dp::service::ingestion::IngestDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::IngestDataResponse>> AsyncingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::IngestDataResponse>>(AsyncingestDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::IngestDataResponse>> PrepareAsyncingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::IngestDataResponse>>(PrepareAsyncingestDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>> ingestDataStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>>(ingestDataStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>> AsyncingestDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>>(AsyncingestDataStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>> PrepareAsyncingestDataStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>>(PrepareAsyncingestDataStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void registerProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest* request, ::dp::service::ingestion::RegisterProviderResponse* response, std::function<void(::grpc::Status)>) override;
      void registerProvider(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest* request, ::dp::service::ingestion::RegisterProviderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest* request, ::dp::service::ingestion::IngestDataResponse* response, std::function<void(::grpc::Status)>) override;
      void ingestData(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest* request, ::dp::service::ingestion::IngestDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ingestDataStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::dp::service::ingestion::IngestDataRequest,::dp::service::ingestion::IngestDataResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::RegisterProviderResponse>* AsyncregisterProviderRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::RegisterProviderResponse>* PrepareAsyncregisterProviderRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::RegisterProviderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::IngestDataResponse>* AsyncingestDataRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dp::service::ingestion::IngestDataResponse>* PrepareAsyncingestDataRaw(::grpc::ClientContext* context, const ::dp::service::ingestion::IngestDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* ingestDataStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* AsyncingestDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* PrepareAsyncingestDataStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerProvider_;
    const ::grpc::internal::RpcMethod rpcmethod_ingestData_;
    const ::grpc::internal::RpcMethod rpcmethod_ingestDataStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // registerProvider: Registers an ingestion data provider and obtains providerId.
    //
    // The provider registration API is not yet implemented.  For now, data ingestion clients should send a unique
    // integer identifier in ingestion requests to distinguish providers as appropriate.
    //
    // TODO: this RPC is not yet implemented.
    virtual ::grpc::Status registerProvider(::grpc::ServerContext* context, const ::dp::service::ingestion::RegisterProviderRequest* request, ::dp::service::ingestion::RegisterProviderResponse* response);
    //
    // ingestData: Unary (non-streaming) data ingestion.
    //
    // This method sends a single IngestDataRequest and receives a single IngestDataResponse.  Validation,
    // rejection / acknowledgment, asynchronous handling, and request status reporting is otherwise the same as for the
    // ingestDataStream() method.
    virtual ::grpc::Status ingestData(::grpc::ServerContext* context, const ::dp::service::ingestion::IngestDataRequest* request, ::dp::service::ingestion::IngestDataResponse* response);
    //
    // ingestDataStream(): Bidirectional streaming data ingestion.
    //
    // The Ingestion Service performs initial validation on each IngestDataRequest in the stream, and replies immediately
    // with a IngestDataResponse message indicating acknowledgement for a valid request, or rejection of an invalid one.
    // The request is then added to a queue for async ingestion handling.
    //
    // The ingestion handling of each request in the stream is performed asynchronously.  The Ingestion Service writes
    // data from the request to the "buckets" collection in MongoDB, adding one document to the collection for each
    // "column" of data in the request's DataFrame object.
    //
    // A separate MongoDB "requestStatus" collection is used to note the processing status of each request,
    // with a document for each handled request.  The collection is keyed by the providerId and clientRequestId
    // specified in the IngestDataRequest.  This collection can be used by an administrative monitoring process
    // to detect and notify about errors in the ingestion process.
    // TODO: add API for querying requestStatus by providerId and clientRequestId.
    //
    // The method returns a stream of IngestDataResponse messages, one per request.  Each response includes providerId
    // and clientRequestId for use by the client in mapping a response to the corresponding request.  The response
    // message only indicates if validation succeeded or failed.  Because ingestion handling is performed asynchronously,
    // the MongoDB "requestStatus" collection must be used to determine the success or failure of individual requests.
    virtual ::grpc::Status ingestDataStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::dp::service::ingestion::IngestDataResponse, ::dp::service::ingestion::IngestDataRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerProvider() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::RegisterProviderRequest* /*request*/, ::dp::service::ingestion::RegisterProviderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterProvider(::grpc::ServerContext* context, ::dp::service::ingestion::RegisterProviderRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::ingestion::RegisterProviderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ingestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ingestData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ingestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestData(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::IngestDataRequest* /*request*/, ::dp::service::ingestion::IngestDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestingestData(::grpc::ServerContext* context, ::dp::service::ingestion::IngestDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::dp::service::ingestion::IngestDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ingestDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ingestDataStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ingestDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::ingestion::IngestDataResponse, ::dp::service::ingestion::IngestDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestingestDataStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::dp::service::ingestion::IngestDataResponse, ::dp::service::ingestion::IngestDataRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerProvider<WithAsyncMethod_ingestData<WithAsyncMethod_ingestDataStream<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerProvider() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::ingestion::RegisterProviderRequest, ::dp::service::ingestion::RegisterProviderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::ingestion::RegisterProviderRequest* request, ::dp::service::ingestion::RegisterProviderResponse* response) { return this->registerProvider(context, request, response); }));}
    void SetMessageAllocatorFor_registerProvider(
        ::grpc::MessageAllocator< ::dp::service::ingestion::RegisterProviderRequest, ::dp::service::ingestion::RegisterProviderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::ingestion::RegisterProviderRequest, ::dp::service::ingestion::RegisterProviderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::RegisterProviderRequest* /*request*/, ::dp::service::ingestion::RegisterProviderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerProvider(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::ingestion::RegisterProviderRequest* /*request*/, ::dp::service::ingestion::RegisterProviderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ingestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ingestData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dp::service::ingestion::IngestDataRequest* request, ::dp::service::ingestion::IngestDataResponse* response) { return this->ingestData(context, request, response); }));}
    void SetMessageAllocatorFor_ingestData(
        ::grpc::MessageAllocator< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ingestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestData(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::IngestDataRequest* /*request*/, ::dp::service::ingestion::IngestDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ingestData(
      ::grpc::CallbackServerContext* /*context*/, const ::dp::service::ingestion::IngestDataRequest* /*request*/, ::dp::service::ingestion::IngestDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ingestDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ingestDataStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ingestDataStream(context); }));
    }
    ~WithCallbackMethod_ingestDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::ingestion::IngestDataResponse, ::dp::service::ingestion::IngestDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* ingestDataStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_registerProvider<WithCallbackMethod_ingestData<WithCallbackMethod_ingestDataStream<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerProvider() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::RegisterProviderRequest* /*request*/, ::dp::service::ingestion::RegisterProviderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ingestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ingestData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ingestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestData(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::IngestDataRequest* /*request*/, ::dp::service::ingestion::IngestDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ingestDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ingestDataStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ingestDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::ingestion::IngestDataResponse, ::dp::service::ingestion::IngestDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerProvider() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::RegisterProviderRequest* /*request*/, ::dp::service::ingestion::RegisterProviderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterProvider(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ingestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ingestData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ingestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestData(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::IngestDataRequest* /*request*/, ::dp::service::ingestion::IngestDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestingestData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ingestDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ingestDataStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ingestDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::ingestion::IngestDataResponse, ::dp::service::ingestion::IngestDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestingestDataStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerProvider() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerProvider(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::RegisterProviderRequest* /*request*/, ::dp::service::ingestion::RegisterProviderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerProvider(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ingestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ingestData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ingestData(context, request, response); }));
    }
    ~WithRawCallbackMethod_ingestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestData(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::IngestDataRequest* /*request*/, ::dp::service::ingestion::IngestDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ingestData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ingestDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ingestDataStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ingestDataStream(context); }));
    }
    ~WithRawCallbackMethod_ingestDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ingestDataStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::dp::service::ingestion::IngestDataResponse, ::dp::service::ingestion::IngestDataRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ingestDataStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerProvider : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerProvider() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::ingestion::RegisterProviderRequest, ::dp::service::ingestion::RegisterProviderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::ingestion::RegisterProviderRequest, ::dp::service::ingestion::RegisterProviderResponse>* streamer) {
                       return this->StreamedregisterProvider(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerProvider() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerProvider(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::RegisterProviderRequest* /*request*/, ::dp::service::ingestion::RegisterProviderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterProvider(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::ingestion::RegisterProviderRequest,::dp::service::ingestion::RegisterProviderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ingestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ingestData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dp::service::ingestion::IngestDataRequest, ::dp::service::ingestion::IngestDataResponse>* streamer) {
                       return this->StreamedingestData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ingestData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ingestData(::grpc::ServerContext* /*context*/, const ::dp::service::ingestion::IngestDataRequest* /*request*/, ::dp::service::ingestion::IngestDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedingestData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dp::service::ingestion::IngestDataRequest,::dp::service::ingestion::IngestDataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerProvider<WithStreamedUnaryMethod_ingestData<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerProvider<WithStreamedUnaryMethod_ingestData<Service > > StreamedService;
};

}  // namespace ingestion
}  // namespace service
}  // namespace dp


#endif  // GRPC_ingestion_2eproto__INCLUDED
